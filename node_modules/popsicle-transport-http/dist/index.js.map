{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import pump = require(\"pump\");\nimport { URL } from \"url\";\nimport { request as httpRequest, IncomingMessage } from \"http\";\nimport { request as httpsRequest, RequestOptions } from \"https\";\nimport { BaseError } from \"make-error-cause\";\nimport {\n  connect as netConnect,\n  Socket,\n  SocketConnectOpts,\n  AddressInfo\n} from \"net\";\nimport {\n  connect as tlsConnect,\n  SecureContext,\n  TLSSocket,\n  ConnectionOptions as TlsConnectOpts\n} from \"tls\";\nimport {\n  connect as http2Connect,\n  IncomingHttpHeaders,\n  constants as h2constants,\n  ClientHttp2Session\n} from \"http2\";\nimport { PassThrough, Writable } from \"stream\";\nimport {\n  Request,\n  Response,\n  CreateBody,\n  ResponseOptions,\n  HeadersInit\n} from \"servie/dist/node\";\nimport { useRawBody } from \"servie/dist/common\";\n\ndeclare module \"servie/dist/signal\" {\n  export interface SignalEvents {\n    error: [Error];\n  }\n}\n\n/**\n * Address information from the HTTP request.\n */\nexport interface Connection {\n  localPort: number;\n  localAddress: string;\n  remotePort: number;\n  remoteAddress: string;\n  encrypted: boolean;\n}\n\n/**\n * Extend response with URL.\n */\nexport interface HttpResponseOptions extends ResponseOptions {\n  url: string;\n  connection: Connection;\n  httpVersion: string;\n}\n\n/**\n * HTTP responses implement a node.js body.\n */\nexport class HttpResponse extends Response implements HttpResponseOptions {\n  url: string;\n  httpVersion: string;\n  connection: Connection;\n\n  constructor(body: CreateBody, options: HttpResponseOptions) {\n    super(body, options);\n    this.url = options.url;\n    this.connection = options.connection;\n    this.httpVersion = options.httpVersion;\n  }\n}\n\nexport class Http2Response extends HttpResponse {\n  // TODO: Add HTTP2 features.\n}\n\n/**\n * Track HTTP connections for reuse.\n */\nexport class ConnectionManager<T> {\n  connections = new Map<string, T>();\n\n  get(key: string) {\n    return this.connections.get(key);\n  }\n\n  set(key: string, connection: T) {\n    if (this.connections.has(key)) {\n      throw new TypeError(\"Connection exists for key\");\n    }\n\n    this.connections.set(key, connection);\n    return connection;\n  }\n\n  delete(key: string, connection: T) {\n    const existing = this.connections.get(key);\n\n    if (existing !== connection) {\n      throw new TypeError(\"Connection for key does not match\");\n    }\n\n    this.connections.delete(key);\n    return connection;\n  }\n}\n\nexport interface ConcurrencyConnectionManagerOptions {\n  maxConnections?: number;\n  maxFreeConnections?: number;\n}\n\nexport class ConnectionSet<T> {\n  used = new Set<T>();\n  free = new Set<T>();\n  pend: Array<(connection?: T) => void> = [];\n}\n\n/**\n * Manage HTTP connection reuse.\n */\nexport class ConcurrencyConnectionManager<T> extends ConnectionManager<\n  ConnectionSet<T>\n> {\n  constructor(\n    public maxFreeConnections = 256,\n    public maxConnections = Infinity\n  ) {\n    super();\n  }\n\n  /**\n   * Create a new connection.\n   */\n  ready(key: string, onReady: (existingConnection?: T) => void): void {\n    const pool = this.get(key);\n\n    // No pool, zero connections.\n    if (!pool) return onReady();\n\n    // Reuse free connections first.\n    if (pool.free.size) return onReady(this.getFreeConnection(key));\n\n    // Add to \"pending\" queue.\n    if (pool.used.size >= this.maxConnections) {\n      pool.pend.push(onReady);\n      return;\n    }\n\n    // Allow a new connection.\n    return onReady();\n  }\n\n  getUsedConnection(key: string): T | undefined {\n    const pool = this.get(key);\n    if (pool) return pool.used.values().next().value;\n  }\n\n  getFreeConnection(key: string): T | undefined {\n    const pool = this.get(key);\n    if (pool) return pool.free.values().next().value;\n  }\n\n  use(key: string, connection: T): void {\n    const pool = this.get(key) || this.set(key, new ConnectionSet<T>());\n    pool.free.delete(connection);\n    pool.used.add(connection);\n  }\n\n  freed(key: string, connection: T, discard: () => void): void {\n    const pool = this.get(key);\n    if (!pool) return;\n\n    // Remove from any possible \"used\".\n    pool.used.delete(connection);\n    pool.free.add(connection);\n\n    // Discard when too many freed connections.\n    if (pool.free.size >= this.maxFreeConnections) return discard();\n\n    // Immediately send for connection.\n    if (pool.pend.length) {\n      const onReady = pool.pend.shift()!;\n      return onReady(connection);\n    }\n  }\n\n  remove(key: string, connection: T): void {\n    const pool = this.get(key);\n    if (!pool) return;\n\n    // Delete connection from pool.\n    if (pool.used.has(connection)) pool.used.delete(connection);\n    if (pool.free.has(connection)) pool.free.delete(connection);\n\n    // Remove connection manager from pooling.\n    if (!pool.free.size && !pool.used.size && !pool.pend.length) {\n      this.delete(key, pool);\n    }\n  }\n}\n\n/**\n * Configure HTTP version negotiation.\n */\nexport enum NegotiateHttpVersion {\n  HTTP1_ONLY,\n  HTTP2_FOR_HTTPS,\n  HTTP2_ONLY\n}\n\n/**\n * Write Servie body to node.js stream.\n */\nfunction pumpBody(\n  req: Request,\n  stream: Writable,\n  onError: (err: Error) => void\n) {\n  const body = useRawBody(req);\n\n  if (Buffer.isBuffer(body) || typeof body === \"string\" || body === null) {\n    stream.end(body);\n  } else {\n    pump(body, stream, err => {\n      if (err) return onError(err);\n    });\n  }\n}\n\n// Global connection caches.\nconst globalNetConnections = new ConcurrencyConnectionManager<Socket>();\nconst globalTlsConnections = new ConcurrencyConnectionManager<TLSSocket>();\nconst globalHttp2Connections = new ConnectionManager<ClientHttp2Session>();\n\n/**\n * Expose connection errors.\n */\nexport class ConnectionError extends BaseError {\n  code = \"EUNAVAILABLE\";\n\n  constructor(public request: Request, message: string, cause: Error) {\n    super(message, cause);\n  }\n}\n\n/**\n * Execute HTTP request.\n */\nfunction execHttp1(\n  req: Request,\n  url: URL,\n  keepAlive: number,\n  socket: Socket | TLSSocket\n): Promise<HttpResponse> {\n  return new Promise<HttpResponse>((resolve, reject) => {\n    const encrypted = url.protocol === \"https:\";\n    const request: typeof httpRequest = encrypted ? httpsRequest : httpRequest;\n\n    const arg: RequestOptions = {\n      protocol: url.protocol,\n      hostname: url.hostname,\n      port: url.port,\n      defaultPort: encrypted ? 443 : 80, // Specify to avoid `Host` header issues.\n      method: req.method,\n      path: url.pathname + url.search,\n      headers: req.headers.asObject(),\n      auth:\n        url.username || url.password\n          ? `${url.username}:${url.password}`\n          : undefined,\n      createConnection: () => socket\n    };\n\n    socket.ref();\n\n    const rawRequest = request(arg);\n    const requestStream = new PassThrough();\n\n    // Handle abort events correctly.\n    req.signal.on(\"abort\", () => {\n      socket.emit(\"agentRemove\"); // `abort` destroys the connection with no event.\n      rawRequest.abort();\n    });\n\n    // Reuse HTTP connections where possible.\n    if (keepAlive > 0) {\n      rawRequest.shouldKeepAlive = true;\n      rawRequest.setHeader(\"Connection\", \"keep-alive\");\n    }\n\n    // Trigger unavailable error when node.js errors before response.\n    function onRequestError(err: Error) {\n      return reject(\n        new ConnectionError(req, `Unable to connect to ${url.host}`, err)\n      );\n    }\n\n    // Track the node.js response.\n    function onResponse(rawResponse: IncomingMessage) {\n      // Trailers are populated on \"end\".\n      const trailer = new Promise<HeadersInit>(resolve => {\n        rawResponse.once(\"end\", () => resolve(rawResponse.trailers));\n      });\n\n      // Replace request error listener behaviour.\n      rawRequest.removeListener(\"error\", onRequestError);\n      rawRequest.on(\"error\", err => req.signal.emit(\"error\", err));\n\n      const {\n        address: localAddress,\n        port: localPort\n      } = rawRequest.connection.address() as AddressInfo;\n\n      const {\n        address: remoteAddress,\n        port: remotePort\n      } = rawResponse.connection.address() as AddressInfo;\n\n      let bytesTransferred = 0;\n      req.signal.emit(\"responseStarted\");\n\n      // Track response progress.\n      rawResponse.on(\"data\", (chunk: Buffer) => {\n        req.signal.emit(\"responseBytes\", (bytesTransferred += chunk.length));\n      });\n\n      rawResponse.once(\"end\", () => {\n        req.signal.emit(\"responseEnded\");\n      });\n\n      const res = new HttpResponse(rawResponse.pipe(new PassThrough()), {\n        status: rawResponse.statusCode,\n        statusText: rawResponse.statusMessage,\n        url: req.url,\n        headers: rawResponse.headers,\n        omitDefaultHeaders: true,\n        trailer,\n        connection: {\n          localAddress,\n          localPort,\n          remoteAddress,\n          remotePort,\n          encrypted\n        },\n        httpVersion: rawResponse.httpVersion\n      });\n\n      return resolve(res);\n    }\n\n    rawRequest.once(\"error\", onRequestError);\n    rawRequest.once(\"response\", onResponse);\n\n    let bytesTransferred = 0;\n    req.signal.emit(\"requestStarted\");\n\n    // Track request upload progress.\n    requestStream.on(\"data\", (chunk: Buffer) => {\n      req.signal.emit(\"requestBytes\", (bytesTransferred += chunk.length));\n    });\n\n    pump(requestStream, rawRequest, err => {\n      if (err) req.signal.emit(\"error\", err);\n      req.signal.emit(\"requestEnded\");\n    });\n\n    return pumpBody(req, requestStream, reject);\n  });\n}\n\n/**\n * ALPN validation error.\n */\nexport class ALPNError extends Error {\n  code = \"EALPNPROTOCOL\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\n/**\n * Execute a HTTP2 connection.\n */\nfunction execHttp2(\n  req: Request,\n  url: URL,\n  client: ClientHttp2Session\n): Promise<Http2Response> {\n  return new Promise<Http2Response>((resolve, reject) => {\n    // HTTP2 formatted headers.\n    const headers = Object.assign(req.headers.asObject(), {\n      [h2constants.HTTP2_HEADER_PATH]: url.pathname + url.search,\n      [h2constants.HTTP2_HEADER_METHOD]: req.method\n    });\n\n    const http2Stream = client.request(headers, { endStream: false });\n    const requestStream = new PassThrough();\n\n    ref(client.socket); // Request ref tracking.\n\n    // Track when stream finishes.\n    function onClose() {\n      req.signal.emit(\"requestEnded\");\n      unref(client.socket);\n    }\n\n    // Trigger unavailable error when node.js errors before response.\n    function onRequestError(err: Error) {\n      return reject(\n        new ConnectionError(req, `Unable to connect to ${url.host}`, err)\n      );\n    }\n\n    function onResponse(headers: IncomingHttpHeaders) {\n      const encrypted = (client.socket as TLSSocket).encrypted === true;\n      const {\n        localAddress,\n        localPort,\n        remoteAddress = \"\",\n        remotePort = 0\n      } = client.socket;\n\n      // Replace request error listener behaviour with proxy.\n      http2Stream.removeListener(\"error\", onRequestError);\n      http2Stream.on(\"error\", err => req.signal.emit(\"error\", err));\n\n      let bytesTransferred = 0;\n      req.signal.emit(\"responseStarted\");\n\n      // Track response progress.\n      http2Stream.on(\"data\", (chunk: Buffer) => {\n        req.signal.emit(\"responseBytes\", (bytesTransferred += chunk.length));\n      });\n\n      http2Stream.once(\"end\", () => {\n        req.signal.emit(\"responseEnded\");\n      });\n\n      const res = new Http2Response(http2Stream.pipe(new PassThrough()), {\n        status: Number(headers[h2constants.HTTP2_HEADER_STATUS]),\n        statusText: \"\",\n        url: req.url,\n        httpVersion: \"2.0\",\n        headers,\n        connection: {\n          localAddress,\n          localPort,\n          remoteAddress,\n          remotePort,\n          encrypted\n        }\n      });\n\n      return resolve(res);\n    }\n\n    http2Stream.once(\"error\", onRequestError);\n    http2Stream.once(\"close\", onClose);\n    http2Stream.once(\"response\", onResponse);\n\n    let bytesTransferred = 0;\n    req.signal.emit(\"requestStarted\");\n    req.signal.on(\"abort\", () => http2Stream.destroy());\n\n    // Track request upload progress.\n    requestStream.on(\"data\", (chunk: Buffer) => {\n      req.signal.emit(\"requestBytes\", (bytesTransferred += chunk.length));\n    });\n\n    pump(requestStream, http2Stream, err => {\n      if (err) req.signal.emit(\"error\", err);\n      req.signal.emit(\"requestEnded\");\n    });\n\n    return pumpBody(req, requestStream, reject);\n  });\n}\n\n/**\n * Node.js HTTP request options.\n */\nexport interface TransportOptions {\n  keepAlive?: number;\n  servername?: string;\n  rejectUnauthorized?: boolean;\n  ca?: string | Buffer | Array<string | Buffer>;\n  cert?: string | Buffer;\n  key?: string | Buffer;\n  secureContext?: SecureContext;\n  secureProtocol?: string;\n  negotiateHttpVersion?: NegotiateHttpVersion;\n}\n\n/**\n * Custom abort error instance.\n */\nexport class AbortError extends Error {\n  code = \"EABORT\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\n/**\n * Forward request over HTTP1/1 or HTTP2, with TLS support.\n */\nexport function transport(options: TransportOptions = {}) {\n  const {\n    keepAlive = 5000, // Default to keeping a connection open briefly.\n    negotiateHttpVersion = NegotiateHttpVersion.HTTP2_FOR_HTTPS\n  } = options;\n\n  // TODO: Allow configuration in options.\n  const tlsConnections = globalTlsConnections;\n  const netConnections = globalNetConnections;\n  const http2Connections = globalHttp2Connections;\n\n  return async function(\n    req: Request,\n    next: () => Promise<HttpResponse>\n  ): Promise<HttpResponse> {\n    const url = new URL(req.url, \"http://localhost\");\n    const { hostname: host, protocol } = url;\n\n    if (req.signal.aborted) {\n      throw new AbortError(req, \"Request has been aborted\");\n    }\n\n    if (protocol === \"http:\") {\n      const port = Number(url.port) || 80;\n      const connectionKey = `${host}:${port}:${negotiateHttpVersion}`;\n\n      // Use existing HTTP2 session in HTTP2 mode.\n      if (negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY) {\n        const existingSession = http2Connections.get(connectionKey);\n\n        if (existingSession) return execHttp2(req, url, existingSession);\n      }\n\n      return new Promise<HttpResponse>(resolve => {\n        return netConnections.ready(connectionKey, freeSocket => {\n          const socketOptions: SocketConnectOpts = { host, port };\n          const socket =\n            freeSocket ||\n            setupSocket(\n              connectionKey,\n              keepAlive,\n              netConnections,\n              netConnect(socketOptions)\n            );\n\n          netConnections.use(connectionKey, socket);\n\n          if (negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY) {\n            const authority = `${protocol}//${host}:${port}`;\n            const client = manageHttp2(\n              authority,\n              connectionKey,\n              keepAlive,\n              http2Connections,\n              socket\n            );\n\n            return resolve(execHttp2(req, url, client));\n          }\n\n          return resolve(execHttp1(req, url, keepAlive, socket));\n        });\n      });\n    }\n\n    // Optionally negotiate HTTP2 connection.\n    if (protocol === \"https:\") {\n      const { ca, cert, key, secureProtocol, secureContext } = options;\n      const port = Number(url.port) || 443;\n      const servername =\n        options.servername ||\n        calculateServerName(host, req.headers.get(\"host\"));\n      const rejectUnauthorized = options.rejectUnauthorized !== false;\n      const connectionKey = `${host}:${port}:${negotiateHttpVersion}:${servername}:${rejectUnauthorized}:${ca ||\n        \"\"}:${cert || \"\"}:${key || \"\"}:${secureProtocol || \"\"}`;\n\n      // Use an existing TLS session to speed up handshake.\n      const existingSocket =\n        tlsConnections.getFreeConnection(connectionKey) ||\n        tlsConnections.getUsedConnection(connectionKey);\n      const session = existingSocket ? existingSocket.getSession() : undefined;\n\n      const socketOptions: TlsConnectOpts = {\n        host,\n        port,\n        servername,\n        rejectUnauthorized,\n        ca,\n        cert,\n        key,\n        session,\n        secureProtocol,\n        secureContext\n      };\n\n      // Use any existing HTTP2 session.\n      if (\n        negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY ||\n        negotiateHttpVersion === NegotiateHttpVersion.HTTP2_FOR_HTTPS\n      ) {\n        const existingSession = http2Connections.get(connectionKey);\n\n        if (existingSession) return execHttp2(req, url, existingSession);\n      }\n\n      return new Promise<HttpResponse>((resolve, reject) => {\n        // Set up ALPN protocols for connection negotiation.\n        if (negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY) {\n          socketOptions.ALPNProtocols = [\"h2\"];\n        } else if (\n          negotiateHttpVersion === NegotiateHttpVersion.HTTP2_FOR_HTTPS\n        ) {\n          socketOptions.ALPNProtocols = [\"h2\", \"http/1.1\"];\n        }\n\n        return tlsConnections.ready(connectionKey, freeSocket => {\n          const socket =\n            freeSocket ||\n            setupSocket(\n              connectionKey,\n              keepAlive,\n              tlsConnections,\n              tlsConnect(socketOptions)\n            );\n\n          tlsConnections.use(connectionKey, socket);\n\n          if (negotiateHttpVersion === NegotiateHttpVersion.HTTP1_ONLY) {\n            return resolve(execHttp1(req, url, keepAlive, socket));\n          }\n\n          if (negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY) {\n            const client = manageHttp2(\n              `${protocol}//${host}:${port}`,\n              connectionKey,\n              keepAlive,\n              http2Connections,\n              socket\n            );\n\n            return resolve(execHttp2(req, url, client));\n          }\n\n          // Execute HTTP connection according to negotiated ALPN protocol.\n          const onConnect = () => {\n            const alpnProtocol: string | false = (socket as any).alpnProtocol;\n\n            // Successfully negotiated HTTP2 connection.\n            if (alpnProtocol === \"h2\") {\n              const existingClient = http2Connections.get(connectionKey);\n\n              if (existingClient) {\n                socket.destroy(); // Destroy socket in case of TLS connection race.\n\n                return resolve(execHttp2(req, url, existingClient));\n              }\n\n              const client = manageHttp2(\n                `${protocol}//${host}:${port}`,\n                connectionKey,\n                keepAlive,\n                http2Connections,\n                socket\n              );\n\n              return resolve(execHttp2(req, url, client));\n            }\n\n            if (alpnProtocol === \"http/1.1\" || alpnProtocol === false) {\n              return resolve(execHttp1(req, url, keepAlive, socket));\n            }\n\n            return reject(\n              new ALPNError(\n                req,\n                `Unknown ALPN protocol negotiated: ${alpnProtocol}`\n              )\n            );\n          };\n\n          // Existing socket may already have negotiated ALPN protocol.\n          if ((socket as any).alpnProtocol !== null) return onConnect();\n\n          // Handle TLS socket connection.\n          socket.once(\"secureConnect\", onConnect);\n\n          // Handle socket connection issues.\n          socket.once(\"error\", (err: Error) => {\n            return reject(\n              new ConnectionError(\n                req,\n                `Unable to connect to ${host}:${port}`,\n                err\n              )\n            );\n          });\n        });\n      });\n    }\n\n    return next();\n  };\n}\n\n/**\n * Setup the socket with the connection manager.\n *\n * Ref: https://github.com/nodejs/node/blob/531b4bedcac14044f09129ffb65dab71cc2707d9/lib/_http_agent.js#L254\n */\nfunction setupSocket<T extends Socket | TLSSocket>(\n  key: string,\n  keepAlive: number,\n  manager: ConcurrencyConnectionManager<T>,\n  socket: T\n) {\n  const onFree = () => {\n    if (keepAlive > 0) {\n      socket.setKeepAlive(true, keepAlive);\n      socket.unref();\n    }\n\n    manager.freed(key, socket, () => socket.destroy());\n  };\n\n  const onClose = () => {\n    manager.remove(key, socket);\n  };\n\n  const onRemove = () => {\n    socket.removeListener(\"free\", onFree);\n    socket.removeListener(\"close\", onClose);\n    manager.remove(key, socket);\n  };\n\n  socket.on(\"free\", onFree);\n  socket.once(\"close\", onClose);\n  socket.once(\"agentRemove\", onRemove);\n\n  return socket;\n}\n\n/**\n * Set up a HTTP2 working session.\n */\nfunction manageHttp2<T extends Socket | TLSSocket>(\n  authority: string,\n  key: string,\n  keepAlive: number,\n  manager: ConnectionManager<ClientHttp2Session>,\n  socket: T\n) {\n  // TODO: Fix node.js types.\n  const connectOptions: any = { createConnection: () => socket };\n  const client = http2Connect(authority, connectOptions);\n\n  manager.set(key, client);\n  client.once(\"close\", () => manager.delete(key, client));\n  client.setTimeout(keepAlive, () => client.close());\n\n  return client;\n}\n\n/**\n * Track socket usage.\n */\nconst SOCKET_REFS = new WeakMap<Socket | TLSSocket, number>();\n\n/**\n * Track socket refs.\n */\nfunction ref(socket: Socket | TLSSocket) {\n  const count = SOCKET_REFS.get(socket) || 0;\n  if (count === 0) socket.ref();\n  SOCKET_REFS.set(socket, count + 1);\n}\n\n/**\n * Track socket unrefs and globally unref.\n */\nfunction unref(socket: Socket | TLSSocket) {\n  const count = SOCKET_REFS.get(socket);\n  if (!count) return;\n  if (count === 1) {\n    socket.unref();\n    SOCKET_REFS.delete(socket);\n    return;\n  }\n  SOCKET_REFS.set(socket, count - 1);\n}\n\n/**\n * Ref: https://github.com/nodejs/node/blob/5823938d156f4eb6dc718746afbf58f1150f70fb/lib/_http_agent.js#L231\n */\nfunction calculateServerName(host: string, hostHeader: string | null) {\n  if (!hostHeader) return host;\n  if (hostHeader.charAt(0) === \"[\") {\n    const index = hostHeader.indexOf(\"]\");\n    if (index === -1) return hostHeader;\n    return hostHeader.substr(1, index - 1);\n  }\n  return hostHeader.split(\":\", 1)[0];\n}\n"]}