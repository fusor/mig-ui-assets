"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var index_1 = require("./index");
describe("make error cause", function () {
    var TestError = /** @class */ (function (_super) {
        __extends(TestError, _super);
        function TestError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TestError;
    }(index_1.BaseError));
    var SubTestError = /** @class */ (function (_super) {
        __extends(SubTestError, _super);
        function SubTestError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SubTestError;
    }(TestError));
    it("should render the cause", function () {
        var cause = new Error("boom!");
        var testError = new TestError("test boom!", cause);
        var subTestError = new SubTestError("sub test boom!", testError);
        expect(index_1.fullStack(cause)).toEqual(cause.stack);
        expect(cause).toBeInstanceOf(Error);
        expect(testError.cause).toEqual(cause);
        expect(index_1.fullStack(testError)).toEqual("" + testError.stack + index_1.SEPARATOR_TEXT + cause.stack);
        expect(util_1.inspect(testError)).toEqual(index_1.fullStack(testError));
        expect(testError).toBeInstanceOf(Error);
        expect(testError).toBeInstanceOf(index_1.BaseError);
        expect(testError).toBeInstanceOf(TestError);
        expect(subTestError.cause).toEqual(testError);
        expect(index_1.fullStack(subTestError)).toEqual("" + subTestError.stack + index_1.SEPARATOR_TEXT + testError.stack + index_1.SEPARATOR_TEXT + cause.stack);
        expect(util_1.inspect(subTestError)).toEqual(index_1.fullStack(subTestError));
        expect(subTestError).toBeInstanceOf(Error);
        expect(subTestError).toBeInstanceOf(index_1.BaseError);
        expect(subTestError).toBeInstanceOf(TestError);
        expect(subTestError).toBeInstanceOf(SubTestError);
    });
});
//# sourceMappingURL=index.spec.js.map