{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,iCAA+D;AAE/D,QAAQ,CAAC,kBAAkB,EAAE;IAC3B;QAAwB,6BAAS;QAAjC;;QAAmC,CAAC;QAAD,gBAAC;IAAD,CAAC,AAApC,CAAwB,iBAAS,GAAG;IACpC;QAA2B,gCAAS;QAApC;;QAAsC,CAAC;QAAD,mBAAC;IAAD,CAAC,AAAvC,CAA2B,SAAS,GAAG;IAEvC,EAAE,CAAC,yBAAyB,EAAE;QAC5B,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QACjC,IAAM,SAAS,GAAG,IAAI,SAAS,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrD,IAAM,YAAY,GAAG,IAAI,YAAY,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;QAEnE,MAAM,CAAC,iBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAEpC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,iBAAS,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAClC,KAAG,SAAS,CAAC,KAAK,GAAG,sBAAc,GAAG,KAAK,CAAC,KAAO,CACpD,CAAC;QACF,MAAM,CAAC,cAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACxC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,iBAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAE5C,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,iBAAS,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CACrC,KAAG,YAAY,CAAC,KAAK,GAAG,sBAAc,GAAG,SAAS,CAAC,KAAK,GAAG,sBAAc,GAAG,KAAK,CAAC,KAAO,CAC1F,CAAC;QACF,MAAM,CAAC,cAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAS,CAAC,YAAY,CAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,iBAAS,CAAC,CAAC;QAC/C,MAAM,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC/C,MAAM,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { inspect } from \"util\";\nimport { BaseError, fullStack, SEPARATOR_TEXT } from \"./index\";\n\ndescribe(\"make error cause\", () => {\n  class TestError extends BaseError {}\n  class SubTestError extends TestError {}\n\n  it(\"should render the cause\", () => {\n    const cause = new Error(\"boom!\");\n    const testError = new TestError(\"test boom!\", cause);\n    const subTestError = new SubTestError(\"sub test boom!\", testError);\n\n    expect(fullStack(cause)).toEqual(cause.stack);\n    expect(cause).toBeInstanceOf(Error);\n\n    expect(testError.cause).toEqual(cause);\n    expect(fullStack(testError)).toEqual(\n      `${testError.stack}${SEPARATOR_TEXT}${cause.stack}`\n    );\n    expect(inspect(testError)).toEqual(fullStack(testError));\n    expect(testError).toBeInstanceOf(Error);\n    expect(testError).toBeInstanceOf(BaseError);\n    expect(testError).toBeInstanceOf(TestError);\n\n    expect(subTestError.cause).toEqual(testError);\n    expect(fullStack(subTestError)).toEqual(\n      `${subTestError.stack}${SEPARATOR_TEXT}${testError.stack}${SEPARATOR_TEXT}${cause.stack}`\n    );\n    expect(inspect(subTestError)).toEqual(fullStack(subTestError));\n    expect(subTestError).toBeInstanceOf(Error);\n    expect(subTestError).toBeInstanceOf(BaseError);\n    expect(subTestError).toBeInstanceOf(TestError);\n    expect(subTestError).toBeInstanceOf(SubTestError);\n  });\n});\n"]}