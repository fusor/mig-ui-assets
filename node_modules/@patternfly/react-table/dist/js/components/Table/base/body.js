"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodashEs = require("lodash-es");

var _react = _interopRequireDefault(require("react"));

var _types = require("./types");

var _bodyRow = _interopRequireDefault(require("./body-row"));

var _resolveRowKey = _interopRequireDefault(require("./resolve-row-key"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Body =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Body, _React$Component);

  function Body() {
    _classCallCheck(this, Body);

    return _possibleConstructorReturn(this, _getPrototypeOf(Body).apply(this, arguments));
  }

  _createClass(Body, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
      // eslint-disable-line no-unused-vars
      // Skip checking props against `onRow` since that can be bound at render().
      // That's not particularly good practice but you never know how the users
      // prefer to define the handler.
      // Check for wrapper based override.
      var renderers = nextContext.renderers;

      if (renderers && renderers.body && renderers.body.wrapper.shouldComponentUpdate) {
        if ((0, _lodashEs.isFunction)(renderers.body.wrapper.shouldComponentUpdate)) {
          return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, nextState, nextContext);
        }

        return true;
      }

      return !((0, _lodashEs.isEqual)(omitOnRow(this.props), omitOnRow(nextProps)) && (0, _lodashEs.isEqual)(this.context, nextContext));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          onRow = _this$props.onRow,
          rows = _this$props.rows,
          rowKey = _this$props.rowKey,
          props = _objectWithoutProperties(_this$props, ["onRow", "rows", "rowKey"]);

      var _this$context = this.context,
          columns = _this$context.columns,
          renderers = _this$context.renderers;
      return _react["default"].createElement(renderers.body.wrapper, props, rows.map(function (rowData, index) {
        var rowIndex = rowData._index || index;
        var key = (0, _resolveRowKey["default"])({
          rowData: rowData,
          rowIndex: rowIndex,
          rowKey: rowKey
        });
        return _react["default"].createElement(_bodyRow["default"], {
          key: key,
          renderers: renderers.body,
          onRow: onRow,
          rowKey: key,
          rowIndex: rowIndex,
          rowData: rowData,
          columns: columns
        });
      }));
    }
  }]);

  return Body;
}(_react["default"].Component);

Body.propTypes = _types.tableBodyTypes;
Body.defaultProps = _types.tableBodyDefaults;
Body.contextTypes = _types.tableBodyContextTypes;

function omitOnRow(props) {
  var onRow = props.onRow,
      ret = _objectWithoutProperties(props, ["onRow"]); // eslint-disable-line no-unused-vars


  return ret;
}

var _default = Body;
exports["default"] = _default;
//# sourceMappingURL=body.js.map