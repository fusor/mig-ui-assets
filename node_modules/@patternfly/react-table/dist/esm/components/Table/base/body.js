function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * body.js
 *
 * Forked from reactabular-table version 8.14.0
 * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src
 * */
import { isEqual, isFunction } from 'lodash-es';
import React from 'react';
import { tableBodyTypes, tableBodyDefaults, tableBodyContextTypes } from './types';
import BodyRow from './body-row';
import resolveRowKey from './resolve-row-key';

class Body extends React.Component {
  shouldComponentUpdate(nextProps, nextState, nextContext) {
    // eslint-disable-line no-unused-vars
    // Skip checking props against `onRow` since that can be bound at render().
    // That's not particularly good practice but you never know how the users
    // prefer to define the handler.
    // Check for wrapper based override.
    const {
      renderers
    } = nextContext;

    if (renderers && renderers.body && renderers.body.wrapper.shouldComponentUpdate) {
      if (isFunction(renderers.body.wrapper.shouldComponentUpdate)) {
        return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, nextState, nextContext);
      }

      return true;
    }

    return !(isEqual(omitOnRow(this.props), omitOnRow(nextProps)) && isEqual(this.context, nextContext));
  }

  render() {
    const _this$props = this.props,
          {
      onRow,
      rows,
      rowKey
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["onRow", "rows", "rowKey"]);

    const {
      columns,
      renderers
    } = this.context;
    return React.createElement(renderers.body.wrapper, props, rows.map((rowData, index) => {
      const rowIndex = rowData._index || index;
      const key = resolveRowKey({
        rowData,
        rowIndex,
        rowKey
      });
      return React.createElement(BodyRow, {
        key,
        renderers: renderers.body,
        onRow,
        rowKey: key,
        rowIndex,
        rowData,
        columns
      });
    }));
  }

}

Body.propTypes = tableBodyTypes;
Body.defaultProps = tableBodyDefaults;
Body.contextTypes = tableBodyContextTypes;

function omitOnRow(props) {
  const {
    onRow
  } = props,
        ret = _objectWithoutProperties(props, ["onRow"]); // eslint-disable-line no-unused-vars


  return ret;
}

export default Body;
//# sourceMappingURL=body.js.map