function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * header.js
 *
 * Forked from reactabular-table version 8.14.0
 * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src
 * */
import React from 'react';
import { tableHeaderTypes, tableHeaderContextTypes } from './types';
import HeaderRow from './header-row'; // eslint-disable-next-line react/prefer-stateless-function

class Header extends React.Component {
  render() {
    const _this$props = this.props,
          {
      children,
      headerRows,
      onRow
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children", "headerRows", "onRow"]);

    const {
      renderers,
      columns
    } = this.context; // If headerRows aren't passed, default to bodyColumns as header rows

    return React.createElement(renderers.header.wrapper, props, [(headerRows || [columns]).map((rowData, rowIndex) => React.createElement(HeaderRow, {
      key: `${rowIndex}-header-row`,
      renderers: renderers.header,
      onRow,
      rowData,
      rowIndex
    }))].concat(children));
  }

}

Header.propTypes = tableHeaderTypes;
Header.contextTypes = tableHeaderContextTypes;
export default Header;
//# sourceMappingURL=header.js.map