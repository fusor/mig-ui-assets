function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { css } from '@patternfly/react-styles';
import styles from '@patternfly/react-styles/css/components/Table/table';

const BodyCell = (_ref) => {
  let {
    'data-label': dataLabel,
    className,
    colSpan,
    component: Component,
    isVisible,
    parentId,
    textCenter,
    isOpen,
    ariaControls
  } = _ref,
      props = _objectWithoutProperties(_ref, ["data-label", "className", "colSpan", "component", "isVisible", "parentId", "textCenter", "isOpen", "ariaControls"]);

  const mappedProps = _objectSpread({}, dataLabel ? {
    'data-label': dataLabel
  } : {}, props);

  return parentId !== undefined && colSpan === undefined || !isVisible ? null : React.createElement(Component, _extends({}, mappedProps, {
    className: css(className, textCenter && styles.modifiers.center),
    colSpan: colSpan
  }));
};

BodyCell.propTypes = {
  'data-label': PropTypes.string,
  className: PropTypes.string,
  colSpan: PropTypes.number,
  component: PropTypes.node,
  isVisible: PropTypes.bool,
  parentId: PropTypes.number,
  textCenter: PropTypes.bool,
  isOpen: PropTypes.bool,
  ariaControls: PropTypes.string
};
BodyCell.defaultProps = {
  'data-label': '',
  className: undefined,
  colSpan: undefined,
  component: 'td',
  isVisible: undefined,
  parentId: undefined,
  textCenter: false,
  isOpen: undefined,
  ariaControls: ''
};
export default BodyCell;
//# sourceMappingURL=BodyCell.js.map