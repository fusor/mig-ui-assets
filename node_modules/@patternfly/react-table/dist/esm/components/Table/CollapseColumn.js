function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { AngleDownIcon } from '@patternfly/react-icons';
import { css } from '@patternfly/react-styles';
import { Button } from '@patternfly/react-core';
import styles from '@patternfly/react-styles/css/components/Table/table';
const propTypes = {
  className: PropTypes.string,
  children: PropTypes.node,
  onToggle: PropTypes.func,
  isOpen: PropTypes.bool
};
const defaultProps = {
  className: '',
  children: null,
  isOpen: undefined,
  onToggle: null
};

const CollapseColumn = (_ref) => {
  let {
    children,
    onToggle,
    isOpen,
    className
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children", "onToggle", "isOpen", "className"]);

  return React.createElement(React.Fragment, null, isOpen !== undefined && React.createElement(Button, _extends({
    className: css(className, isOpen && styles.modifiers.expanded)
  }, props, {
    variant: "plain",
    "aria-label": "Details",
    onClick: onToggle,
    "aria-expanded": isOpen
  }), React.createElement(AngleDownIcon, null)), children);
};

CollapseColumn.propTypes = propTypes;
CollapseColumn.defaultProps = defaultProps;
export default CollapseColumn;
//# sourceMappingURL=CollapseColumn.js.map