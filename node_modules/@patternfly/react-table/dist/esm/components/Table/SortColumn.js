function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';
import { css } from '@patternfly/react-styles';
import styles from '@patternfly/react-styles/css/components/Table/table';
const propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  isSortedBy: PropTypes.bool,
  onSort: PropTypes.func,
  sortDirection: PropTypes.string
};
const defaultProps = {
  children: null,
  className: '',
  isSortedBy: false,
  onSort: null,
  sortDirection: ''
};
export const SortByDirection = {
  asc: 'asc',
  desc: 'desc'
};

const SortColumn = (_ref) => {
  let {
    isSortedBy,
    children,
    className,
    onSort,
    sortDirection
  } = _ref,
      props = _objectWithoutProperties(_ref, ["isSortedBy", "children", "className", "onSort", "sortDirection"]);

  let SortedByIcon;

  if (isSortedBy) {
    SortedByIcon = sortDirection === 'asc' ? LongArrowAltUpIcon : LongArrowAltDownIcon;
  } else {
    SortedByIcon = ArrowsAltVIcon;
  }

  return React.createElement("button", _extends({}, props, {
    className: css(className),
    onClick: event => onSort && onSort(event)
  }), children, React.createElement("span", {
    className: css(styles.tableSortIndicator)
  }, React.createElement(SortedByIcon, null)));
};

SortColumn.propTypes = propTypes;
SortColumn.defaultProps = defaultProps;
export default SortColumn;
//# sourceMappingURL=SortColumn.js.map