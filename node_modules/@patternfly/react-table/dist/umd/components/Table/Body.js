(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "./base", "prop-types", "./Table", "./utils"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("./base"), require("prop-types"), require("./Table"), require("./utils"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.base, global.propTypes, global.Table, global.utils);
    global.undefined = mod.exports;
  }
})(this, function (exports, _react, _base, _propTypes, _Table, _utils) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  const propTypes = {
    /** Additional classes for table body. */
    className: _propTypes2.default.string,

    /** Specify key which should be used for labeling each row. */
    rowKey: _propTypes2.default.string,

    /** Function that is fired when user clicks on row.  */
    onRowClick: _propTypes2.default.func
  };
  const defaultProps = {
    rowKey: 'id',
    className: '',
    onRowClick: () => undefined
  };

  const flagVisibility = rows => {
    const visibleRows = rows.filter(oneRow => !oneRow.parent || oneRow.isExpanded);

    if (visibleRows.length > 0) {
      visibleRows[0].isFirstVisible = true;
      visibleRows[visibleRows.length - 1].isLastVisible = true;
    }
  };

  class ContextBody extends _react2.default.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "onRow", (row, rowProps) => {
        const {
          onRowClick,
          onRow
        } = this.props;

        const extendedRowProps = _objectSpread({}, rowProps, onRow ? onRow(row, rowProps) : {});

        return {
          row,
          rowProps: extendedRowProps,
          onMouseDown: event => {
            const computedData = {
              isInput: event.target.tagName !== 'INPUT',
              isButton: event.target.tagName !== 'BUTTON'
            };
            onRowClick(event, row, rowProps, computedData);
          }
        };
      });

      _defineProperty(this, "mapCells", (headerData, row, rowKey) => {
        // column indexes start after generated optional columns
        let additionalColsIndexShift = headerData[0].extraParams.firstUserColumnIndex;
        return _objectSpread({}, row && (row.cells || row).reduce((acc, cell, cellIndex) => {
          const isCellObject = cell === Object(cell);
          const mappedCell = {
            [headerData[cellIndex + additionalColsIndexShift].property]: {
              title: isCellObject ? cell.title : cell,
              props: _objectSpread({
                isVisible: true
              }, isCellObject ? cell.props : null)
            }
          }; // increment the shift index when a cell spans multiple columns

          if (isCellObject && cell.props && cell.props.colSpan) {
            additionalColsIndexShift += cell.props.colSpan - 1;
          }

          return _objectSpread({}, acc, mappedCell);
        }, {
          id: row.id !== undefined ? row.id : rowKey
        }));
      });
    }

    render() {
      const _this$props = this.props,
            {
        className,
        headerData,
        rows,
        rowKey,
        children,
        onRowClick
      } = _this$props,
            props = _objectWithoutProperties(_this$props, ["className", "headerData", "rows", "rowKey", "children", "onRowClick"]);

      let mappedRows;

      if (headerData.length > 0) {
        mappedRows = rows.map((oneRow, oneRowKey) => _objectSpread({}, oneRow, this.mapCells(headerData, oneRow, oneRowKey), {
          isExpanded: (0, _utils.isRowExpanded)(oneRow, rows),
          isFirst: oneRowKey === 0,
          isLast: oneRowKey === rows.length - 1,
          isFirstVisible: false,
          isLastVisible: false
        }));
        flagVisibility(mappedRows);
      }

      return _react2.default.createElement(_react2.default.Fragment, null, mappedRows && _react2.default.createElement(_base.Body, _extends({}, props, {
        mappedRows: mappedRows,
        rows: mappedRows,
        onRow: this.onRow,
        rowKey: rowKey,
        className: className
      })));
    }

  }

  ContextBody.propTypes = {
    className: _propTypes2.default.string,
    children: _propTypes2.default.node,
    headerData: _propTypes2.default.array,
    rows: _propTypes2.default.array,
    rowKey: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
    onRowClick: _propTypes2.default.func,
    onRow: _propTypes2.default.func
  };
  ContextBody.defaultProps = {
    className: '',
    children: null,
    headerData: [],
    rows: [],
    onRowClick: () => undefined,
    onRow: () => undefined
  };

  const TableBody = props => _react2.default.createElement(_Table.TableContext.Consumer, null, ({
    headerData,
    rows
  }) => _react2.default.createElement(ContextBody, _extends({
    headerData: headerData,
    rows: rows
  }, props)));

  TableBody.propTypes = propTypes;
  TableBody.defaultProps = defaultProps;
  exports.default = TableBody;
});
//# sourceMappingURL=Body.js.map