(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "lodash-es", "react", "./types", "./body-row", "./resolve-row-key"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("lodash-es"), require("react"), require("./types"), require("./body-row"), require("./resolve-row-key"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.lodashEs, global.react, global.types, global.bodyRow, global.resolveRowKey);
    global.undefined = mod.exports;
  }
})(this, function (exports, _lodashEs, _react, _types, _bodyRow, _resolveRowKey) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _bodyRow2 = _interopRequireDefault(_bodyRow);

  var _resolveRowKey2 = _interopRequireDefault(_resolveRowKey);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
  /**
   * body.js
   *
   * Forked from reactabular-table version 8.14.0
   * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src
   * */


  class Body extends _react2.default.Component {
    shouldComponentUpdate(nextProps, nextState, nextContext) {
      // eslint-disable-line no-unused-vars
      // Skip checking props against `onRow` since that can be bound at render().
      // That's not particularly good practice but you never know how the users
      // prefer to define the handler.
      // Check for wrapper based override.
      const {
        renderers
      } = nextContext;

      if (renderers && renderers.body && renderers.body.wrapper.shouldComponentUpdate) {
        if ((0, _lodashEs.isFunction)(renderers.body.wrapper.shouldComponentUpdate)) {
          return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, nextState, nextContext);
        }

        return true;
      }

      return !((0, _lodashEs.isEqual)(omitOnRow(this.props), omitOnRow(nextProps)) && (0, _lodashEs.isEqual)(this.context, nextContext));
    }

    render() {
      const _this$props = this.props,
            {
        onRow,
        rows,
        rowKey
      } = _this$props,
            props = _objectWithoutProperties(_this$props, ["onRow", "rows", "rowKey"]);

      const {
        columns,
        renderers
      } = this.context;
      return _react2.default.createElement(renderers.body.wrapper, props, rows.map((rowData, index) => {
        const rowIndex = rowData._index || index;
        const key = (0, _resolveRowKey2.default)({
          rowData,
          rowIndex,
          rowKey
        });
        return _react2.default.createElement(_bodyRow2.default, {
          key,
          renderers: renderers.body,
          onRow,
          rowKey: key,
          rowIndex,
          rowData,
          columns
        });
      }));
    }

  }

  Body.propTypes = _types.tableBodyTypes;
  Body.defaultProps = _types.tableBodyDefaults;
  Body.contextTypes = _types.tableBodyContextTypes;

  function omitOnRow(props) {
    const {
      onRow
    } = props,
          ret = _objectWithoutProperties(props, ["onRow"]); // eslint-disable-line no-unused-vars


    return ret;
  }

  exports.default = Body;
});
//# sourceMappingURL=body.js.map