(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "lodash-es", "react", "./columns-are-equal", "./evaluate-formatters", "./evaluate-transforms", "./merge-props", "./types"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("lodash-es"), require("react"), require("./columns-are-equal"), require("./evaluate-formatters"), require("./evaluate-transforms"), require("./merge-props"), require("./types"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.lodashEs, global.react, global.columnsAreEqual, global.evaluateFormatters, global.evaluateTransforms, global.mergeProps, global.types);
    global.undefined = mod.exports;
  }
})(this, function (exports, _lodashEs, _react, _columnsAreEqual, _evaluateFormatters, _evaluateTransforms, _mergeProps, _types) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _columnsAreEqual2 = _interopRequireDefault(_columnsAreEqual);

  var _evaluateFormatters2 = _interopRequireDefault(_evaluateFormatters);

  var _evaluateTransforms2 = _interopRequireDefault(_evaluateTransforms);

  var _mergeProps2 = _interopRequireDefault(_mergeProps);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }
  /**
   * body-row.js
   *
   * Forked from reactabular-table version 8.14.0
   * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src
   * */


  class BodyRow extends _react2.default.Component {
    shouldComponentUpdate(nextProps) {
      // eslint-disable-line no-unused-vars
      const previousProps = this.props; // Check for row based override.

      const {
        renderers
      } = nextProps;

      if (renderers && renderers.row && renderers.row.shouldComponentUpdate) {
        if ((0, _lodashEs.isFunction)(renderers.row.shouldComponentUpdate)) {
          return renderers.row.shouldComponentUpdate.call(this, nextProps);
        }

        return true;
      }

      return !((0, _columnsAreEqual2.default)(previousProps.columns, nextProps.columns) && (0, _lodashEs.isEqual)(previousProps.rowData, nextProps.rowData));
    }

    render() {
      const {
        columns,
        renderers,
        onRow,
        rowKey,
        rowIndex,
        rowData
      } = this.props;
      return _react2.default.createElement(renderers.row, onRow(rowData, {
        rowIndex,
        rowKey
      }), columns.map((column, columnIndex) => {
        const {
          property,
          cell,
          props
        } = column;
        const evaluatedProperty = property || cell && cell.property;
        const {
          transforms = [],
          formatters = []
        } = cell || {}; // TODO: test against this case

        const extraParameters = {
          columnIndex,
          property: evaluatedProperty,
          column,
          rowData,
          rowIndex,
          rowKey
        };
        const transformed = (0, _evaluateTransforms2.default)(transforms, rowData[evaluatedProperty], extraParameters);

        if (!transformed) {
          console.warn('Table.Body - Failed to receive a transformed result'); // eslint-disable-line max-len, no-console
        }

        return _react2.default.createElement(renderers.cell, _objectSpread({
          key: `${columnIndex}-cell`
        }, (0, _mergeProps2.default)(props, cell && cell.props, transformed)), transformed.children || (0, _evaluateFormatters2.default)(formatters)(rowData[`_${evaluatedProperty}`] || rowData[evaluatedProperty], extraParameters));
      }));
    }

  }

  BodyRow.defaultProps = _types.tableBodyRowDefaults;
  BodyRow.propTypes = _types.tableBodyRowTypes;
  exports.default = BodyRow;
});
//# sourceMappingURL=body-row.js.map