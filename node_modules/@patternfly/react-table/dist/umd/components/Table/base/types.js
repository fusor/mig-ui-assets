(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "prop-types"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("prop-types"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.propTypes);
    global.undefined = mod.exports;
  }
})(this, function (exports, _propTypes) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.tableDefaults = exports.tableHeaderRowDefaults = exports.tableHeaderRowTypes = exports.tableHeaderContextTypes = exports.tableHeaderTypes = exports.tableBodyRowDefaults = exports.tableBodyRowTypes = exports.tableBodyContextTypes = exports.tableBodyDefaults = exports.tableBodyTypes = exports.tableContextTypes = exports.tableTypes = undefined;

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  /**
   * types.js
   *
   * Forked from reactabular-table version 8.14.0
   * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src
   * */
  const arrayOfObjectColumns = _propTypes2.default.arrayOf(_propTypes2.default.shape({
    header: _propTypes2.default.shape({
      label: _propTypes2.default.string,
      transforms: _propTypes2.default.arrayOf(_propTypes2.default.func),
      formatters: _propTypes2.default.arrayOf(_propTypes2.default.func),
      props: _propTypes2.default.object
    }),
    cell: _propTypes2.default.shape({
      property: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
      transforms: _propTypes2.default.arrayOf(_propTypes2.default.func),
      formatters: _propTypes2.default.arrayOf(_propTypes2.default.func),
      props: _propTypes2.default.object
    })
  }));

  const arrayOfArrayColumns = _propTypes2.default.arrayOf(_propTypes2.default.array);

  const rowsType = _propTypes2.default.oneOfType([arrayOfObjectColumns, arrayOfArrayColumns]);

  const rowKeyType = _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]);

  const rowDataType = _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]);

  const tableTypes = {
    columns: _propTypes2.default.array.isRequired,
    renderers: _propTypes2.default.object,
    components: _propTypes2.default.object // XXXXX: Deprecated in favor of renderers, remove in the next major!

  };
  const tableContextTypes = {
    columns: _propTypes2.default.array.isRequired,
    renderers: _propTypes2.default.object
  };
  const tableBodyDefaults = {
    onRow: () => {}
  };
  const tableBodyTypes = {
    onRow: _propTypes2.default.func,
    rows: rowsType.isRequired,
    rowKey: rowKeyType
  };
  const tableBodyContextTypes = {
    columns: _propTypes2.default.array.isRequired,
    renderers: _propTypes2.default.object
  };
  const tableBodyRowDefaults = {
    onRow: () => ({})
  };
  const tableBodyRowTypes = {
    columns: _propTypes2.default.array.isRequired,
    renderers: _propTypes2.default.object,
    onRow: _propTypes2.default.func,
    rowIndex: _propTypes2.default.number.isRequired,
    rowData: rowDataType.isRequired,
    rowKey: _propTypes2.default.string.isRequired
  };
  const tableHeaderTypes = {
    headerRows: _propTypes2.default.arrayOf(arrayOfObjectColumns),
    children: _propTypes2.default.any
  };
  const tableHeaderContextTypes = {
    columns: _propTypes2.default.array.isRequired,
    renderers: _propTypes2.default.object
  };
  const tableHeaderRowDefaults = {
    onRow: () => ({})
  };
  const tableHeaderRowTypes = {
    renderers: _propTypes2.default.object,
    onRow: _propTypes2.default.func,
    rowIndex: _propTypes2.default.number.isRequired,
    rowData: rowDataType.isRequired
  };
  const tableDefaults = {
    renderers: {
      table: 'table',
      header: {
        wrapper: 'thead',
        row: 'tr',
        cell: 'th'
      },
      body: {
        wrapper: 'tbody',
        row: 'tr',
        cell: 'td'
      }
    }
  };
  exports.tableTypes = tableTypes;
  exports.tableContextTypes = tableContextTypes;
  exports.tableBodyTypes = tableBodyTypes;
  exports.tableBodyDefaults = tableBodyDefaults;
  exports.tableBodyContextTypes = tableBodyContextTypes;
  exports.tableBodyRowTypes = tableBodyRowTypes;
  exports.tableBodyRowDefaults = tableBodyRowDefaults;
  exports.tableHeaderTypes = tableHeaderTypes;
  exports.tableHeaderContextTypes = tableHeaderContextTypes;
  exports.tableHeaderRowTypes = tableHeaderRowTypes;
  exports.tableHeaderRowDefaults = tableHeaderRowDefaults;
  exports.tableDefaults = tableDefaults;
});
//# sourceMappingURL=types.js.map