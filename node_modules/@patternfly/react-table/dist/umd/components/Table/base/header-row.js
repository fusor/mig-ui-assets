(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "./evaluate-formatters", "./evaluate-transforms", "./merge-props", "./types"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("./evaluate-formatters"), require("./evaluate-transforms"), require("./merge-props"), require("./types"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.evaluateFormatters, global.evaluateTransforms, global.mergeProps, global.types);
    global.undefined = mod.exports;
  }
})(this, function (exports, _react, _evaluateFormatters, _evaluateTransforms, _mergeProps, _types) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _evaluateFormatters2 = _interopRequireDefault(_evaluateFormatters);

  var _evaluateTransforms2 = _interopRequireDefault(_evaluateTransforms);

  var _mergeProps2 = _interopRequireDefault(_mergeProps);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }
  /**
   * header-row.js
   *
   * Forked from reactabular-table version 8.14.0
   * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src
   * */


  const HeaderRow = ({
    rowData,
    rowIndex,
    renderers,
    onRow
  }) => _react2.default.createElement(renderers.row, onRow(rowData, {
    rowIndex
  }), rowData.map((column, columnIndex) => {
    const {
      property,
      header = {},
      props = {}
    } = column;
    const evaluatedProperty = property || header && header.property;
    const {
      label,
      transforms = [],
      formatters = []
    } = header;
    const extraParameters = {
      columnIndex,
      property: evaluatedProperty,
      column
    };
    const transformedProps = (0, _evaluateTransforms2.default)(transforms, label, extraParameters);

    if (!transformedProps) {
      console.warn('Table.Header - Failed to receive a transformed result'); // eslint-disable-line max-len, no-console
    }

    return _react2.default.createElement(renderers.cell, _objectSpread({
      key: `${columnIndex}-header`
    }, (0, _mergeProps2.default)(props, header && header.props, transformedProps)), transformedProps.children || (0, _evaluateFormatters2.default)(formatters)(label, extraParameters));
  }));

  HeaderRow.defaultProps = _types.tableHeaderRowDefaults;
  HeaderRow.propTypes = _types.tableHeaderRowTypes;
  exports.default = HeaderRow;
});
//# sourceMappingURL=header-row.js.map