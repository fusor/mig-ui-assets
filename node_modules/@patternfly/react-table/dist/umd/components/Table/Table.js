(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "@patternfly/react-styles/css/components/Table/table", "@patternfly/react-styles/css/components/Table/table-grid", "./base", "@patternfly/react-core", "@patternfly/react-styles", "prop-types", "./SortColumn", "./BodyCell", "./HeaderCell", "./RowWrapper", "./BodyWrapper", "./utils/headerUtils"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("@patternfly/react-styles/css/components/Table/table"), require("@patternfly/react-styles/css/components/Table/table-grid"), require("./base"), require("@patternfly/react-core"), require("@patternfly/react-styles"), require("prop-types"), require("./SortColumn"), require("./BodyCell"), require("./HeaderCell"), require("./RowWrapper"), require("./BodyWrapper"), require("./utils/headerUtils"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.table, global.tableGrid, global.base, global.reactCore, global.reactStyles, global.propTypes, global.SortColumn, global.BodyCell, global.HeaderCell, global.RowWrapper, global.BodyWrapper, global.headerUtils);
    global.undefined = mod.exports;
  }
})(this, function (exports, _react, _table, _tableGrid, _base, _reactCore, _reactStyles, _propTypes, _SortColumn, _BodyCell, _HeaderCell, _RowWrapper, _BodyWrapper, _headerUtils) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TableContext = exports.TableVariant = exports.TableGridBreakpoint = undefined;

  var _react2 = _interopRequireDefault(_react);

  var _table2 = _interopRequireDefault(_table);

  var _tableGrid2 = _interopRequireDefault(_tableGrid);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _BodyCell2 = _interopRequireDefault(_BodyCell);

  var _HeaderCell2 = _interopRequireDefault(_HeaderCell);

  var _RowWrapper2 = _interopRequireDefault(_RowWrapper);

  var _BodyWrapper2 = _interopRequireDefault(_BodyWrapper);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  const TableGridBreakpoint = exports.TableGridBreakpoint = {
    none: null,
    grid: 'grid',
    gridMd: 'grid-md',
    gridLg: 'grid-lg',
    gridXl: 'grid-xl',
    grid2xl: 'grid-2xl'
  };
  const TableVariant = exports.TableVariant = {
    compact: 'compact'
  };
  const propTypes = {
    /** Table elements [Head, Body and Footer]. */
    children: _propTypes2.default.node,

    /** Addional classes for Table. */
    className: _propTypes2.default.string,

    /** Function called when user wants to collapse row. */
    onCollapse: _propTypes2.default.func,

    /** Function called when user wants to compound expand row. */
    onExpand: _propTypes2.default.func,

    /** Table variant, defaults to large. */
    variant: _propTypes2.default.oneOf(Object.values(TableVariant)),

    /** Size at which table is broken into tiles. */
    gridBreakPoint: _propTypes2.default.oneOf(Object.values(TableGridBreakpoint)),

    /** Indicates if border is visible on a compacat table.  Note that this can not be applied when using expandable */
    borders: _propTypes2.default.bool,

    /** Settings for sorting, which index and direction is sorted by. */
    sortBy: _propTypes2.default.shape({
      index: _propTypes2.default.number,
      direction: _propTypes2.default.oneOf(Object.values(_SortColumn.SortByDirection))
    }),

    /** Function called when user wants to select row. */
    onSelect: _propTypes2.default.func,

    /** Function called when user wants to sort table. */
    onSort: _propTypes2.default.func,

    /** Additional cell displayed at the end of each row with dropdown of action items. */
    actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      onClick: _propTypes2.default.func,
      title: _propTypes2.default.node
    })),

    /** Function should resolve an array of actions for each row in the same format as actions. */
    actionResolver: _propTypes2.default.func,

    /** Function should resolve if action kebap is disabled for each row */
    areActionsDisabled: _propTypes2.default.func,

    /** Override to the default BodyWrapper renderer */
    bodyWrapper: _propTypes2.default.func,

    /** Override to the default RowWrapper renderer */
    rowWrapper: _propTypes2.default.func,

    /** Actual rows to display in table. Either array of strings or row objects. <br/>
     * If you want to use components in row cells you can pass them as title prop in cells definition. <br/>
     * <pre>Ex: rows:[
     *   {cells:[
     *     {title: &lt;div>Some component&lt;/div>}
     *     ...
     *   ]}
     * ]
     * </pre> */
    rows: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.shape({
      cells: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.shape({
        title: _propTypes2.default.node
      })])),
      isOpen: _propTypes2.default.bool,
      parent: _propTypes2.default.number,
      fullWidth: _propTypes2.default.bool,
      noPadding: _propTypes2.default.bool,
      props: _propTypes2.default.any
    }), _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.shape({
      title: _propTypes2.default.node
    }), _propTypes2.default.node]))])).isRequired,

    /** Header cells to display in table. Either array of strings or array of string or cell object. */
    cells: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.shape({
      title: _propTypes2.default.node,
      transforms: _propTypes2.default.arrayOf(_propTypes2.default.func),
      // Applies only to header cell
      cellTransforms: _propTypes2.default.arrayOf(_propTypes2.default.func),
      // Applies only to body cells
      columnTransforms: _propTypes2.default.arrayOf(_propTypes2.default.func),
      // Applies to both header and body cells
      formatters: _propTypes2.default.arrayOf(_propTypes2.default.func),
      cellFormatters: _propTypes2.default.arrayOf(_propTypes2.default.func)
    })])).isRequired,

    /** Aria labeled by this property collapse and select. */
    rowLabeledBy: _propTypes2.default.string,

    /** Id prefix for expand buttons. */
    expandId: _propTypes2.default.string,

    /** Id prefix for expanded content. */
    contentId: _propTypes2.default.string,

    /** Position of dropdown from actions will be displayed. */
    dropdownPosition: _propTypes2.default.oneOf(Object.values(_reactCore.DropdownPosition)),

    /** Direction of from actions will be displayed. */
    dropdownDirection: _propTypes2.default.oneOf(Object.values(_reactCore.DropdownDirection)),

    /** Header to display above table for accessibility reasons. */
    header: props => {
      if (!props['aria-label'] && !props.caption && !props.header && !props.role === 'presentation') {
        throw new Error('Specify at least one of: header, caption, aria-label');
      }

      return null;
    },

    /** Caption to display in table for accessibility reasons. */
    caption: props => {
      if (!props['aria-label'] && !props.caption && !props.header && !props.role === 'presentation') {
        throw new Error('Specify at least one of: header, caption, aria-label');
      }

      return null;
    },

    /** aria-label in table for accessibility reasons. */
    'aria-label': props => {
      if (!props['aria-label'] && !props.caption && !props.header && !props.role === 'presentation') {
        throw new Error('Specify at least one of: header, caption, aria-label');
      }

      return null;
    },
    role: _propTypes2.default.string
  };
  const defaultProps = {
    children: null,
    onCollapse: null,
    onExpand: null,
    className: '',
    variant: null,
    borders: true,
    sortBy: undefined,
    onSelect: undefined,
    onSort: undefined,
    actions: undefined,
    actionResolver: undefined,
    areActionsDisabled: undefined,
    bodyWrapper: undefined,
    rowWrapper: undefined,
    rowLabeledBy: 'simple-node',
    expandId: 'expandable-toggle',
    contentId: 'expanded-content',
    dropdownPosition: _reactCore.DropdownPosition.right,
    dropdownDirection: _reactCore.DropdownDirection.down,
    header: undefined,
    caption: undefined,
    'aria-label': undefined,
    gridBreakPoint: TableGridBreakpoint.gridMd,
    role: 'grid'
  };

  const TableContext = exports.TableContext = _react2.default.createContext();

  class Table extends _react2.default.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "isSelected", row => row.selected === true);

      _defineProperty(this, "areAllRowsSelected", rows => rows.every(row => this.isSelected(row) || row.hasOwnProperty('parent') && !row.showSelect));
    }

    render() {
      const _this$props = this.props,
            {
        caption,
        header,
        className,
        gridBreakPoint,
        onSort,
        onSelect,
        sortBy,
        children,
        actions,
        actionResolver,
        areActionsDisabled,
        onCollapse,
        onExpand,
        rowLabeledBy,
        dropdownPosition,
        dropdownDirection,
        contentId,
        expandId,
        variant,
        rows,
        cells,
        bodyWrapper,
        rowWrapper,
        borders,
        role
      } = _this$props,
            props = _objectWithoutProperties(_this$props, ["caption", "header", "className", "gridBreakPoint", "onSort", "onSelect", "sortBy", "children", "actions", "actionResolver", "areActionsDisabled", "onCollapse", "onExpand", "rowLabeledBy", "dropdownPosition", "dropdownDirection", "contentId", "expandId", "variant", "rows", "cells", "bodyWrapper", "rowWrapper", "borders", "role"]);

      const headerData = (0, _headerUtils.calculateColumns)(cells, {
        sortBy,
        onSort,
        onSelect,
        allRowsSelected: onSelect ? this.areAllRowsSelected(rows) : false,
        actions,
        actionResolver,
        areActionsDisabled,
        onCollapse,
        onExpand,
        rowLabeledBy,
        expandId,
        contentId,
        dropdownPosition,
        dropdownDirection,
        firstUserColumnIndex: [onCollapse, onSelect].filter(callback => callback).length
      });
      return _react2.default.createElement(TableContext.Provider, {
        value: {
          headerData,
          rows
        }
      }, header, _react2.default.createElement(_base.Provider, _extends({}, props, {
        renderers: {
          body: {
            wrapper: bodyWrapper || _BodyWrapper2.default,
            row: rowWrapper || _RowWrapper2.default,
            cell: _BodyCell2.default
          },
          header: {
            cell: _HeaderCell2.default
          }
        },
        columns: headerData,
        role: role,
        className: (0, _reactStyles.css)(_table2.default.table, gridBreakPoint && (0, _reactStyles.getModifier)(_tableGrid2.default, gridBreakPoint), (0, _reactStyles.getModifier)(_table2.default, variant), (onCollapse && variant === TableVariant.compact || onExpand) && _table2.default.modifiers.expandable, variant === TableVariant.compact && borders === false ? _table2.default.modifiers.noBorderRows : null, className)
      }), caption && _react2.default.createElement("caption", null, caption), children));
    }

  }

  Table.propTypes = propTypes;
  Table.defaultProps = defaultProps;
  exports.default = Table;
});
//# sourceMappingURL=Table.js.map