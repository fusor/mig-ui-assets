function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import styles from '@patternfly/react-styles/css/components/Switch/switch';
import { css } from '@patternfly/react-styles';
import { CheckIcon } from '@patternfly/react-icons';
import { getUniqueId } from '../../helpers/util';
const propTypes = {
  /** id for the label. */
  id: PropTypes.string,

  /** Additional classes added to the Switch */
  className: PropTypes.string,

  /** Text value for the label */
  label: PropTypes.string,

  /** Flag to show if the Switch is checked. */
  isChecked: PropTypes.bool,

  /** Flag to show if the Switch is disabled. */
  isDisabled: PropTypes.bool,

  /** A callback for when the Switch selection changes. (isChecked, event) => {} */
  onChange: PropTypes.func,

  /** Adds accessible text to the Switch, and should describe the isChecked="true" state. When label is defined, aria-label should be set to the text string that is visible when isChecked is true. */
  'aria-label': props => {
    if (!props.id && !props['aria-label']) {
      return new Error('Switch requires either an id or aria-label to be specified');
    }

    return null;
  },

  /** Additional props are spread to the container <input> */
  '': PropTypes.any // eslint-disable-line react/require-default-props

};
const defaultProps = {
  id: '',
  className: '',
  label: '',
  isChecked: true,
  isDisabled: false,
  onChange: () => undefined,
  'aria-label': ''
};

class Switch extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "id", this.props.id || getUniqueId());
  }

  render() {
    const _this$props = this.props,
          {
      id,
      className,
      label,
      isChecked,
      isDisabled,
      onChange
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["id", "className", "label", "isChecked", "isDisabled", "onChange"]);

    return React.createElement("label", {
      className: css(styles.switch, className),
      htmlFor: this.id
    }, React.createElement("input", _extends({}, props, {
      id: this.id,
      className: css(styles.switchInput),
      type: "checkbox",
      onChange: event => onChange(event.currentTarget.checked, event),
      checked: isChecked,
      disabled: isDisabled
    })), label !== '' ? React.createElement(React.Fragment, null, React.createElement("span", {
      className: css(styles.switchToggle)
    }), React.createElement("span", {
      className: css(styles.switchLabel, styles.modifiers.on),
      "aria-hidden": "true"
    }, label), React.createElement("span", {
      className: css(styles.switchLabel, styles.modifiers.off),
      "aria-hidden": "true"
    }, label)) : React.createElement("span", {
      className: css(styles.switchToggle)
    }, React.createElement("div", {
      className: css(styles.switchToggleIcon),
      "aria-hidden": "true"
    }, React.createElement(CheckIcon, {
      noVerticalAlign: true
    }))));
  }

}

Switch.propTypes = propTypes;
Switch.defaultProps = defaultProps;
export default Switch;
//# sourceMappingURL=Switch.js.map