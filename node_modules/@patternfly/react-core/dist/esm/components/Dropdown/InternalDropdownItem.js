function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import { css } from '@patternfly/react-styles';
import { componentShape } from '../../helpers/componentShape';
import { DropdownContext } from './dropdownConstants';
import { KEY_CODES, KEYHANDLER_DIRECTION } from '../../helpers/constants';
import { Tooltip } from '../Tooltip';
const propTypes = {
  /** Anything which can be rendered as dropdown item */
  children: PropTypes.node,

  /** Classes applied to root element of dropdown item */
  className: PropTypes.string,

  /** Indicates which component will be used as dropdown item */
  component: componentShape,

  /** Role for the item */
  role: PropTypes.string,

  /** Render dropdown item as disabled option */
  isDisabled: PropTypes.bool,

  /** Forces display of the hover state of the element */
  isHovered: PropTypes.bool,

  /** Default hyperlink location */
  href: PropTypes.string,

  /** Tooltip to display when hovered over the item */
  tooltip: PropTypes.node,

  /** Additional tooltip props forwarded to the Tooltip component */
  tooltipProps: PropTypes.any,
  index: PropTypes.number,
  context: PropTypes.shape({
    keyHandler: PropTypes.func,
    sendRef: PropTypes.func
  }),

  /** Callback for click event */
  onClick: PropTypes.func,

  /** Additional props are spread to the container component */
  '': PropTypes.any // eslint-disable-line react/require-default-props

};
const defaultProps = {
  children: null,
  className: '',
  isHovered: false,
  component: 'a',
  role: null,
  isDisabled: false,
  href: '',
  tooltip: null,
  tooltipProps: {},
  onClick: Function.prototype,
  index: -1,
  context: {
    keyHandler: Function.prototype,
    sendRef: Function.prototype
  }
};

class DropdownItem extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "onKeyDown", event => {
      // Detected key press on this item, notify the menu parent so that the appropriate
      // item can be focused
      if (event.keyCode === KEY_CODES.TAB) return;
      event.preventDefault();

      if (event.keyCode === KEY_CODES.ARROW_UP) {
        this.props.context.keyHandler(this.props.index, KEYHANDLER_DIRECTION.UP);
      } else if (event.keyCode === KEY_CODES.ARROW_DOWN) {
        this.props.context.keyHandler(this.props.index, KEYHANDLER_DIRECTION.DOWN);
      } else if (event.keyCode === KEY_CODES.ENTER) {
        if (!this.ref.current.getAttribute) {
          ReactDOM.findDOMNode(this.ref.current).click(); // eslint-disable-line react/no-find-dom-node
        } else {
          this.ref.current.click && this.ref.current.click();
        }
      }
    });
  }

  componentDidMount() {
    this.props.context.sendRef(this.props.index, this.ref.current, this.props.isDisabled);
  }

  render() {
    const _this$props = this.props,
          {
      className,
      children,
      isHovered,
      context,
      onClick,
      component: Component,
      isDisabled,
      index,
      href,
      tooltip,
      tooltipProps
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["className", "children", "isHovered", "context", "onClick", "component", "isDisabled", "index", "href", "tooltip", "tooltipProps"]);

    const additionalProps = props;
    let classes;

    if (Component === 'a') {
      additionalProps['aria-disabled'] = isDisabled;
      additionalProps.tabIndex = isDisabled ? -1 : additionalProps.tabIndex;
    } else if (Component === 'button') {
      additionalProps.disabled = isDisabled;
      additionalProps.type = additionalProps.type || 'button';
    }

    const renderWithTooltip = childNode => tooltip ? React.createElement(Tooltip, _extends({
      content: tooltip
    }, tooltipProps), childNode) : childNode;

    return React.createElement(DropdownContext.Consumer, null, ({
      onSelect,
      itemClass,
      disabledClass,
      hoverClass
    }) => {
      if (this.props.role === 'separator') {
        classes = className;
      } else {
        classes = css(isDisabled && disabledClass, isHovered && hoverClass, className);
      }

      return React.createElement("li", {
        role: "none"
      }, React.isValidElement(children) ? React.Children.map(children, child => {
        const clonedElement = React.cloneElement(child, {
          className: css(isDisabled && disabledClass, isHovered && hoverClass, className, itemClass, child.props.className),
          ref: this.ref,
          onKeyDown: this.onKeyDown,
          onClick: event => {
            if (!isDisabled) {
              onClick && onClick(event);
              onSelect && onSelect(event);
            }
          }
        });
        return renderWithTooltip(clonedElement);
      }) : renderWithTooltip(React.createElement(Component, _extends({}, additionalProps, {
        href: href || null,
        className: css(classes, this.props.role !== 'separator' && itemClass),
        ref: this.ref,
        onKeyDown: this.onKeyDown,
        onClick: event => {
          if (!isDisabled) {
            onClick && onClick(event);
            onSelect && onSelect(event);
          }
        }
      }), children)));
    });
  }

}

DropdownItem.propTypes = propTypes;
DropdownItem.defaultProps = defaultProps;
export default DropdownItem;
//# sourceMappingURL=InternalDropdownItem.js.map