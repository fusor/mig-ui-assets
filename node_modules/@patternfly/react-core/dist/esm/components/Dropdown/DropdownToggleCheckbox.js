function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';
import { css } from '@patternfly/react-styles';
import PropTypes from 'prop-types';
const propTypes = {
  /** Additional classes added to the DropdownToggleCheckbox */
  className: PropTypes.string,

  /** Flag to show if the checkbox selection is valid or invalid */
  isValid: PropTypes.bool,

  /** Flag to show if the checkbox is disabled */
  isDisabled: PropTypes.bool,

  /** Flag to show if the checkbox is checked */
  isChecked: PropTypes.bool,

  /** Alternate Flag to show if the checkbox is checked */
  checked: PropTypes.bool,

  /** A callback for when the checkbox selection changes */
  onChange: PropTypes.func,

  /** Id of the checkbox */
  id: PropTypes.string.isRequired,

  /** Aria-label of the checkbox */
  'aria-label': PropTypes.any.isRequired,

  /** Additional props are spread to the <input> */
  '': PropTypes.any // eslint-disable-line react/require-default-props

};
const defaultProps = {
  className: '',
  isValid: true,
  isDisabled: false,
  isChecked: null,
  checked: null,
  onChange: () => undefined
};

class DropdownToggleCheckbox extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleChange", event => {
      this.props.onChange(event.currentTarget.checked, event);
    });
  }

  render() {
    const _this$props = this.props,
          {
      className,
      onChange,
      isValid,
      isDisabled,
      isChecked,
      checked
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["className", "onChange", "isValid", "isDisabled", "isChecked", "checked"]);

    return React.createElement("label", {
      className: css(styles.dropdownToggleCheck, className),
      htmlFor: props.id
    }, React.createElement("input", _extends({}, props, {
      type: "checkbox",
      onChange: this.handleChange,
      "aria-invalid": !isValid,
      disabled: isDisabled,
      checked: isChecked || checked
    })));
  }

}

DropdownToggleCheckbox.propTypes = propTypes;
DropdownToggleCheckbox.defaultProps = defaultProps;
export default DropdownToggleCheckbox;
//# sourceMappingURL=DropdownToggleCheckbox.js.map