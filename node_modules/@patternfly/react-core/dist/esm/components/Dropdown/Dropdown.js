function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Children, cloneElement } from 'react';
import PropTypes from 'prop-types';
import styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';
import { css } from '@patternfly/react-styles';
import DropdownMenu from './DropdownMenu';
import { DropdownPosition, DropdownDirection, DropdownContext } from './dropdownConstants'; // seed for the aria-labelledby ID

let currentId = 0;
const propTypes = {
  /** Anything which can be rendered in a dropdown */
  children: props => {
    if (props.dropdownItems && props.dropdownItems.length > 0 && props.children) {
      return new Error(`Children and dropdownItems props have been provided. Only the dropdownItems prop items will be rendered `);
    }

    return null;
  },

  /** Classes applied to root element of dropdown */
  className: PropTypes.string,

  /** Array of DropdownItem nodes that will be rendered in the dropdown Menu list */
  dropdownItems: PropTypes.array,

  /** Flag to indicate if menu is opened */
  isOpen: PropTypes.bool,

  /** Display the toggle with no border or background */
  isPlain: PropTypes.bool,

  /** Indicates where menu will be aligned horizontally */
  position: PropTypes.oneOf(Object.values(DropdownPosition)),

  /** Display menu above or below dropdown toggle */
  direction: PropTypes.oneOf(Object.values(DropdownDirection)),

  /** Flag to indicate if dropdown has groups */
  isGrouped: PropTypes.bool,

  /** Placeholder to use custom toggle elements */
  toggle: PropTypes.node.isRequired,

  /** Function callback called when user selects item */
  onSelect: PropTypes.func,

  /** Additional props are spread to the container <div> */
  '': PropTypes.any // eslint-disable-line react/require-default-props

};
const defaultProps = {
  children: null,
  className: '',
  dropdownItems: [],
  isOpen: false,
  isPlain: false,
  isGrouped: false,
  position: DropdownPosition.left,
  direction: DropdownDirection.down,
  onSelect: Function.prototype
};
export class DropdownWithContext extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "onEnter", () => {
      this.openedOnEnter = true;
    });
  }

  componentDidUpdate() {
    if (!this.props.isOpen) this.openedOnEnter = false;
  }

  render() {
    const _this$props = this.props,
          {
      children,
      className,
      direction,
      dropdownItems,
      isOpen,
      isPlain,
      isGrouped,
      onSelect,
      position,
      toggle
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["children", "className", "direction", "dropdownItems", "isOpen", "isPlain", "isGrouped", "onSelect", "position", "toggle"]);

    const id = toggle.props.id || `pf-toggle-id-${currentId++}`;
    let component;
    let renderedContent;
    let ariaHasPopup = null;

    if (dropdownItems && dropdownItems.length > 0) {
      component = 'ul';
      renderedContent = dropdownItems;
      ariaHasPopup = true;
    } else {
      component = 'div';
      renderedContent = children;
    }

    return React.createElement(DropdownContext.Consumer, null, ({
      baseClass,
      baseComponent: BaseComponent
    }) => React.createElement(BaseComponent, _extends({}, props, {
      className: css(baseClass, direction === DropdownDirection.up && styles.modifiers.top, isOpen && styles.modifiers.expanded, className),
      ref: ref => {
        this.parentRef = ref;
      }
    }), Children.map(toggle, oneToggle => cloneElement(oneToggle, {
      parentRef: this.parentRef,
      isOpen,
      id,
      isPlain,
      ariaHasPopup,
      onEnter: this.onEnter
    })), isOpen && React.createElement(DropdownMenu, {
      component: component,
      isOpen: isOpen,
      position: position,
      "aria-labelledby": id,
      openedOnEnter: this.openedOnEnter,
      isGrouped: isGrouped
    }, renderedContent)));
  }

}

const Dropdown = (_ref) => {
  let {
    onSelect
  } = _ref,
      props = _objectWithoutProperties(_ref, ["onSelect"]);

  return React.createElement(DropdownContext.Provider, {
    value: {
      onSelect: event => onSelect && onSelect(event),
      menuClass: styles.dropdownMenu,
      itemClass: styles.dropdownMenuItem,
      toggleClass: styles.dropdownToggle,
      baseClass: styles.dropdown,
      baseComponent: 'div',
      sectionClass: styles.dropdownGroup,
      sectionTitleClass: styles.dropdownGroupTitle,
      sectionComponent: 'section',
      disabledClass: styles.modifiers.disabled,
      hoverClass: styles.modifiers.hover,
      separatorClass: styles.dropdownSeparator
    }
  }, React.createElement(DropdownWithContext, props));
};

Dropdown.propTypes = propTypes;
Dropdown.defaultProps = defaultProps;
DropdownWithContext.propTypes = propTypes;
DropdownWithContext.defaultProps = defaultProps;
export default Dropdown;
//# sourceMappingURL=Dropdown.js.map