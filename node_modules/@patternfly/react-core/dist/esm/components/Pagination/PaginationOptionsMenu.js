function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';
import paginationStyles from '@patternfly/react-styles/css/components/Pagination/pagination';
import { css } from '@patternfly/react-styles';
import { Dropdown, DropdownItem, DropdownDirection } from '../Dropdown';
import { CheckIcon } from '@patternfly/react-icons';
import OptionsToggle from './OptionsToggle';
const propTypes = {
  className: PropTypes.string,
  widgetId: PropTypes.string,
  dropDirection: PropTypes.oneOf(Object.values(DropdownDirection)),
  perPageOptions: PropTypes.arrayOf(PropTypes.shape({
    title: PropTypes.node,
    value: PropTypes.number
  })),
  itemsPerPageTitle: PropTypes.string,
  perPageSuffix: PropTypes.string,
  itemsTitle: PropTypes.string,
  optionsToggle: PropTypes.string,
  itemCount: PropTypes.number,
  firstIndex: PropTypes.number,
  lastIndex: PropTypes.number,
  perPage: PropTypes.number,
  toggleTemplate: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  onPerPageSelect: PropTypes.func
};
const defaultProps = {
  className: '',
  widgetId: '',
  dropDirection: DropdownDirection.down,
  perPageOptions: [],
  itemsTitle: 'items',
  itemsPerPageTitle: 'Items per page',
  perPageSuffix: 'per page',
  optionsToggle: 'Select',
  itemCount: 0,
  firstIndex: 0,
  lastIndex: 0,
  perPage: 0,
  toggleTemplate: ({
    firstIndex,
    lastIndex,
    itemCount,
    itemsTitle // eslint-disable-line react/prop-types

  }) => React.createElement(React.Fragment, null, React.createElement("strong", null, firstIndex, " - ", lastIndex), ' ', "of", React.createElement("strong", null, itemCount), " ", itemsTitle),
  onPerPageSelect: Function.prototype
};

class PaginationOptionsMenu extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isOpen: false
    });

    _defineProperty(this, "onToggle", isOpen => {
      this.setState({
        isOpen
      });
    });

    _defineProperty(this, "onSelect", () => {
      this.setState({
        isOpen: !this.state.isOpen
      });
    });

    _defineProperty(this, "renderItems", () => {
      const {
        perPageOptions,
        onPerPageSelect,
        perPage,
        perPageSuffix
      } = this.props;
      return perPageOptions.map(({
        value,
        title
      }) => React.createElement(DropdownItem, {
        key: value,
        component: "button",
        "data-action": `per-page-${value}`,
        className: css(styles.optionsMenuMenuItem, perPage === value && 'pf-m-selected'),
        onClick: event => onPerPageSelect(event, value)
      }, title, React.createElement("span", {
        className: css(paginationStyles.paginationMenuText)
      }, ` ${perPageSuffix}`), perPage === value && React.createElement("i", {
        className: css(styles.optionsMenuMenuItemIcon)
      }, React.createElement(CheckIcon, null))));
    });
  }

  render() {
    const _this$props = this.props,
          {
      className,
      widgetId,
      dropDirection,
      perPageOptions,
      itemsPerPageTitle,
      itemsTitle,
      optionsToggle,
      itemCount,
      firstIndex,
      lastIndex,
      perPage,
      perPageSuffix,
      onPerPageSelect,
      toggleTemplate
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["className", "widgetId", "dropDirection", "perPageOptions", "itemsPerPageTitle", "itemsTitle", "optionsToggle", "itemCount", "firstIndex", "lastIndex", "perPage", "perPageSuffix", "onPerPageSelect", "toggleTemplate"]);

    return React.createElement("div", _extends({
      className: css(styles.optionsMenu, className)
    }, props, {
      ref: ref => {
        this.parentRef = ref;
      }
    }), React.createElement("span", {
      id: `${widgetId}-label`,
      hidden: true
    }, itemsPerPageTitle, ":"), React.createElement(Dropdown, {
      direction: dropDirection,
      onSelect: this.onSelect,
      isOpen: this.state.isOpen,
      toggle: React.createElement(OptionsToggle, {
        optionsToggle: optionsToggle,
        showToggle: perPageOptions && perPageOptions.length > 0,
        itemsTitle: itemsTitle,
        onToggle: this.onToggle,
        isOpen: this.state.isOpen,
        firstIndex: firstIndex,
        lastIndex: lastIndex,
        itemCount: itemCount,
        widgetId: widgetId,
        parentRef: this.parentRef,
        toggleTemplate: toggleTemplate
      }),
      dropdownItems: this.renderItems(),
      isPlain: true
    }));
  }

}

PaginationOptionsMenu.propTypes = propTypes;
PaginationOptionsMenu.defaultProps = defaultProps;
export default PaginationOptionsMenu;
//# sourceMappingURL=PaginationOptionsMenu.js.map