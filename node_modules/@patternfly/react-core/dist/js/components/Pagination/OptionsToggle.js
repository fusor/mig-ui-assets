"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _optionsMenu = _interopRequireDefault(require("@patternfly/react-styles/css/components/OptionsMenu/options-menu"));

var _reactStyles = require("@patternfly/react-styles");

var _helpers = require("../../helpers");

var _Dropdown = require("../Dropdown");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function OptionsToggle(props) {
  var itemsTitle = props.itemsTitle,
      optionsToggle = props.optionsToggle,
      firstIndex = props.firstIndex,
      lastIndex = props.lastIndex,
      itemCount = props.itemCount,
      widgetId = props.widgetId,
      onToggle = props.onToggle,
      isOpen = props.isOpen,
      showToggle = props.showToggle,
      parentRef = props.parentRef,
      ToggleTemplate = props.toggleTemplate;
  return _react["default"].createElement("div", {
    className: (0, _reactStyles.css)(_optionsMenu["default"].optionsMenuToggle, (0, _reactStyles.getModifier)(_optionsMenu["default"], 'plain'), (0, _reactStyles.getModifier)(_optionsMenu["default"], 'text'))
  }, _react["default"].createElement("span", {
    className: (0, _reactStyles.css)(_optionsMenu["default"].optionsMenuToggleText)
  }, typeof ToggleTemplate === 'string' ? (0, _helpers.fillTemplate)(ToggleTemplate, {
    firstIndex: firstIndex,
    lastIndex: lastIndex,
    itemCount: itemCount,
    itemsTitle: itemsTitle
  }) : _react["default"].createElement(ToggleTemplate, {
    firstIndex: firstIndex,
    lastIndex: lastIndex,
    itemCount: itemCount,
    itemsTitle: itemsTitle
  })), showToggle && _react["default"].createElement(_Dropdown.DropdownToggle, {
    "aria-label": optionsToggle,
    onToggle: onToggle,
    isOpen: isOpen,
    id: "".concat(widgetId, "-toggle"),
    isSplitButton: true,
    className: _optionsMenu["default"].optionsMenuToggleButton,
    parentRef: parentRef
  }));
}

OptionsToggle.propTypes = {
  itemsTitle: _propTypes["default"].string,
  optionsToggle: _propTypes["default"].string,
  firstIndex: _propTypes["default"].number,
  lastIndex: _propTypes["default"].number,
  itemCount: _propTypes["default"].number,
  widgetId: _propTypes["default"].string,
  onToggle: _propTypes["default"].func,
  isOpen: _propTypes["default"].bool,
  parentRef: _propTypes["default"].any,
  showToggle: _propTypes["default"].bool,
  toggleTemplate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func])
};
OptionsToggle.defaultProps = {
  itemsTitle: 'items',
  optionsToggle: 'Select',
  firstIndex: 0,
  lastIndex: 0,
  itemCount: 0,
  widgetId: '',
  onToggle: function onToggle() {
    return undefined;
  },
  isOpen: false,
  parentRef: null,
  showToggle: true,
  toggleTemplate: ''
};
var _default = OptionsToggle;
exports["default"] = _default;
//# sourceMappingURL=OptionsToggle.js.map