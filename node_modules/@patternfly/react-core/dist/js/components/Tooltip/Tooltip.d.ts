import * as React from 'react';
import { Instance as TippyInstance } from 'tippy.js';
import { ReactElement } from 'react';
export declare enum TooltipPosition {
    top = "top",
    bottom = "bottom",
    left = "left",
    right = "right"
}
export interface TooltipProps {
    /** Tooltip position */
    position?: 'top' | 'bottom' | 'left' | 'right';
    /** Tooltip trigger: click, mouseenter, focus */
    trigger?: string;
    /** If true, tries to keep the tooltip in view by flipping it if necessary */
    enableFlip?: boolean;
    /** Tooltip additional class */
    className?: string;
    /** Tooltip content */
    content: React.ReactNode;
    /** The reference element to which the tooltip is relatively placed to */
    children: ReactElement<any>;
    /** Delay in ms before the tooltip appears */
    entryDelay?: number;
    /** Delay in ms before the tooltip disappears */
    exitDelay?: number;
    /** The element to append the tooltip to, defaults to body */
    appendTo?: Element | ((ref: Element) => Element);
    /** z-index of the tooltip */
    zIndex?: number;
    /** Maximum width of the tooltip (default 12.5rem) */
    maxWidth?: string;
    /** If true, displays as an application launcher */
    isAppLauncher?: boolean;
    /** Distance of the tooltip to its target, defaults to 15 */
    distance?: number;
}
export declare class Tooltip extends React.Component<TooltipProps> {
    private tip;
    static defaultProps: {
        position: string;
        trigger: string;
        enableFlip: boolean;
        className: string;
        entryDelay: number;
        exitDelay: number;
        appendTo: () => HTMLElement;
        zIndex: number;
        maxWidth: "" | "18.75rem";
        isAppLauncher: boolean;
        distance: number;
    };
    storeTippyInstance: (tip: TippyInstance) => void;
    handleEscKeyClick: (event: KeyboardEvent) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    extendChildren(): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
    render(): JSX.Element;
}
