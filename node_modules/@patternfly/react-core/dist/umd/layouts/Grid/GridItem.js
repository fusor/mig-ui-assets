(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "prop-types", "@patternfly/react-styles/css/layouts/Grid/grid", "@patternfly/react-styles", "../../styles/sizes", "./gridUtils"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("prop-types"), require("@patternfly/react-styles/css/layouts/Grid/grid"), require("@patternfly/react-styles"), require("../../styles/sizes"), require("./gridUtils"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.grid, global.reactStyles, global.sizes, global.gridUtils);
    global.undefined = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _grid, _reactStyles, _sizes, _gridUtils) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _grid2 = _interopRequireDefault(_grid);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  const propTypes = {
    /** content rendered inside the Grid Layout Item */
    children: _propTypes2.default.any,

    /** additional classes added to the Grid Layout Item */
    className: _propTypes2.default.string,

    /** the number of columns the grid item spans. Value should be a number 1-12   */
    span: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of rows the grid item spans. Value should be a number 1-12   */
    rowSpan: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns a grid item is offset */
    offset: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item spans on small device. Value should be a number 1-12   */
    sm: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of rows the grid item spans on medium device. Value should be a number 1-12   */
    smRowSpan: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item is offset on small device. Value should be a number 1-12   */
    smOffset: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item spans on medium device. Value should be a number 1-12   */
    md: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of rows the grid item spans on medium device. Value should be a number 1-12   */
    mdRowSpan: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item is offset on medium device. Value should be a number 1-12   */
    mdOffset: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item spans on large device. Value should be a number 1-12   */
    lg: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of rows the grid item spans on large device. Value should be a number 1-12   */
    lgRowSpan: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item is offset on large device. Value should be a number 1-12   */
    lgOffset: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item spans on xLarge device. Value should be a number 1-12   */
    xl: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of rows the grid item spans on large device. Value should be a number 1-12   */
    xlRowSpan: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item is offset on xLarge device. Value should be a number 1-12   */
    xlOffset: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item spans on 2xLarge device. Value should be a number 1-12   */
    xl2: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of rows the grid item spans on 2xLarge device. Value should be a number 1-12   */
    xl2RowSpan: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** the number of columns the grid item is offset on 2xLarge device. Value should be a number 1-12   */
    xl2Offset: _propTypes2.default.oneOf(_gridUtils.gridSpans),

    /** Additional props are spread to the container <div> */
    '': _propTypes2.default.any // eslint-disable-line react/require-default-props

  };
  const defaultProps = {
    children: null,
    className: '',
    span: null,
    rowSpan: null,
    offset: null,
    sm: null,
    smRowSpan: null,
    smOffset: null,
    md: null,
    mdRowSpan: null,
    mdOffset: null,
    lg: null,
    lgRowSpan: null,
    lgOffset: null,
    xl: null,
    xlRowSpan: null,
    xlOffset: null,
    xl2: null,
    xl2RowSpan: null,
    xl2Offset: null
  };

  const GridItem = _ref => {
    let {
      children,
      className,
      span,
      rowSpan,
      offset
    } = _ref,
        props = _objectWithoutProperties(_ref, ["children", "className", "span", "rowSpan", "offset"]);

    const classes = [_grid2.default.gridItem, span && (0, _gridUtils.getSpanModifier)(span), offset && (0, _gridUtils.getOffsetModifier)(offset), rowSpan && (0, _gridUtils.getRowSpanModifier)(rowSpan)];
    Object.entries(_sizes.DeviceSizes).forEach(([propKey, classModifier]) => {
      const spanValue = props[propKey];
      const rowSpanValue = props[(0, _gridUtils.getRowSpanKey)(propKey)];
      const offsetValue = props[(0, _gridUtils.getOffsetKey)(propKey)];

      if (spanValue) {
        classes.push((0, _gridUtils.getSpanModifier)(spanValue, classModifier));
      }

      if (rowSpanValue) {
        classes.push((0, _gridUtils.getRowSpanModifier)(rowSpanValue, classModifier));
      }

      if (offsetValue) {
        classes.push((0, _gridUtils.getOffsetModifier)(offsetValue, classModifier));
      }

      delete props[propKey];
      delete props[(0, _gridUtils.getRowSpanKey)(propKey)];
      delete props[(0, _gridUtils.getOffsetKey)(propKey)];
    });
    return _react2.default.createElement("div", _extends({
      className: (0, _reactStyles.css)(...classes, className)
    }, props), children);
  };

  GridItem.propTypes = propTypes;
  GridItem.defaultProps = defaultProps;
  exports.default = GridItem;
});
//# sourceMappingURL=GridItem.js.map