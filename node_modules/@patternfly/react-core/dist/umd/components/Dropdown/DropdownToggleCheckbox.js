(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "@patternfly/react-styles/css/components/Dropdown/dropdown", "@patternfly/react-styles", "prop-types"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("@patternfly/react-styles/css/components/Dropdown/dropdown"), require("@patternfly/react-styles"), require("prop-types"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.dropdown, global.reactStyles, global.propTypes);
    global.undefined = mod.exports;
  }
})(this, function (exports, _react, _dropdown, _reactStyles, _propTypes) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _dropdown2 = _interopRequireDefault(_dropdown);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  const propTypes = {
    /** Additional classes added to the DropdownToggleCheckbox */
    className: _propTypes2.default.string,

    /** Flag to show if the checkbox selection is valid or invalid */
    isValid: _propTypes2.default.bool,

    /** Flag to show if the checkbox is disabled */
    isDisabled: _propTypes2.default.bool,

    /** Flag to show if the checkbox is checked */
    isChecked: _propTypes2.default.bool,

    /** Alternate Flag to show if the checkbox is checked */
    checked: _propTypes2.default.bool,

    /** A callback for when the checkbox selection changes */
    onChange: _propTypes2.default.func,

    /** Id of the checkbox */
    id: _propTypes2.default.string.isRequired,

    /** Aria-label of the checkbox */
    'aria-label': _propTypes2.default.any.isRequired,

    /** Additional props are spread to the <input> */
    '': _propTypes2.default.any // eslint-disable-line react/require-default-props

  };
  const defaultProps = {
    className: '',
    isValid: true,
    isDisabled: false,
    isChecked: null,
    checked: null,
    onChange: () => undefined
  };

  class DropdownToggleCheckbox extends _react2.default.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "handleChange", event => {
        this.props.onChange(event.currentTarget.checked, event);
      });
    }

    render() {
      const _this$props = this.props,
            {
        className,
        onChange,
        isValid,
        isDisabled,
        isChecked,
        checked
      } = _this$props,
            props = _objectWithoutProperties(_this$props, ["className", "onChange", "isValid", "isDisabled", "isChecked", "checked"]);

      return _react2.default.createElement("label", {
        className: (0, _reactStyles.css)(_dropdown2.default.dropdownToggleCheck, className),
        htmlFor: props.id
      }, _react2.default.createElement("input", _extends({}, props, {
        type: "checkbox",
        onChange: this.handleChange,
        "aria-invalid": !isValid,
        disabled: isDisabled,
        checked: isChecked || checked
      })));
    }

  }

  DropdownToggleCheckbox.propTypes = propTypes;
  DropdownToggleCheckbox.defaultProps = defaultProps;
  exports.default = DropdownToggleCheckbox;
});
//# sourceMappingURL=DropdownToggleCheckbox.js.map