(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "react-dom", "prop-types", "@patternfly/react-styles", "../../helpers/componentShape", "./dropdownConstants", "../../helpers/constants", "../Tooltip"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("react-dom"), require("prop-types"), require("@patternfly/react-styles"), require("../../helpers/componentShape"), require("./dropdownConstants"), require("../../helpers/constants"), require("../Tooltip"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.reactDom, global.propTypes, global.reactStyles, global.componentShape, global.dropdownConstants, global.constants, global.Tooltip);
    global.undefined = mod.exports;
  }
})(this, function (exports, _react, _reactDom, _propTypes, _reactStyles, _componentShape, _dropdownConstants, _constants, _Tooltip) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _reactDom2 = _interopRequireDefault(_reactDom);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  const propTypes = {
    /** Anything which can be rendered as dropdown item */
    children: _propTypes2.default.node,

    /** Classes applied to root element of dropdown item */
    className: _propTypes2.default.string,

    /** Indicates which component will be used as dropdown item */
    component: _componentShape.componentShape,

    /** Role for the item */
    role: _propTypes2.default.string,

    /** Render dropdown item as disabled option */
    isDisabled: _propTypes2.default.bool,

    /** Forces display of the hover state of the element */
    isHovered: _propTypes2.default.bool,

    /** Default hyperlink location */
    href: _propTypes2.default.string,

    /** Tooltip to display when hovered over the item */
    tooltip: _propTypes2.default.node,

    /** Additional tooltip props forwarded to the Tooltip component */
    tooltipProps: _propTypes2.default.any,
    index: _propTypes2.default.number,
    context: _propTypes2.default.shape({
      keyHandler: _propTypes2.default.func,
      sendRef: _propTypes2.default.func
    }),

    /** Callback for click event */
    onClick: _propTypes2.default.func,

    /** Additional props are spread to the container component */
    '': _propTypes2.default.any // eslint-disable-line react/require-default-props

  };
  const defaultProps = {
    children: null,
    className: '',
    isHovered: false,
    component: 'a',
    role: null,
    isDisabled: false,
    href: '',
    tooltip: null,
    tooltipProps: {},
    onClick: Function.prototype,
    index: -1,
    context: {
      keyHandler: Function.prototype,
      sendRef: Function.prototype
    }
  };

  class DropdownItem extends _react2.default.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "ref", _react2.default.createRef());

      _defineProperty(this, "onKeyDown", event => {
        // Detected key press on this item, notify the menu parent so that the appropriate
        // item can be focused
        if (event.keyCode === _constants.KEY_CODES.TAB) return;
        event.preventDefault();

        if (event.keyCode === _constants.KEY_CODES.ARROW_UP) {
          this.props.context.keyHandler(this.props.index, _constants.KEYHANDLER_DIRECTION.UP);
        } else if (event.keyCode === _constants.KEY_CODES.ARROW_DOWN) {
          this.props.context.keyHandler(this.props.index, _constants.KEYHANDLER_DIRECTION.DOWN);
        } else if (event.keyCode === _constants.KEY_CODES.ENTER) {
          if (!this.ref.current.getAttribute) {
            _reactDom2.default.findDOMNode(this.ref.current).click(); // eslint-disable-line react/no-find-dom-node

          } else {
            this.ref.current.click && this.ref.current.click();
          }
        }
      });
    }

    componentDidMount() {
      this.props.context.sendRef(this.props.index, this.ref.current, this.props.isDisabled);
    }

    render() {
      const _this$props = this.props,
            {
        className,
        children,
        isHovered,
        context,
        onClick,
        component: Component,
        isDisabled,
        index,
        href,
        tooltip,
        tooltipProps
      } = _this$props,
            props = _objectWithoutProperties(_this$props, ["className", "children", "isHovered", "context", "onClick", "component", "isDisabled", "index", "href", "tooltip", "tooltipProps"]);

      const additionalProps = props;
      let classes;

      if (Component === 'a') {
        additionalProps['aria-disabled'] = isDisabled;
        additionalProps.tabIndex = isDisabled ? -1 : additionalProps.tabIndex;
      } else if (Component === 'button') {
        additionalProps.disabled = isDisabled;
        additionalProps.type = additionalProps.type || 'button';
      }

      const renderWithTooltip = childNode => tooltip ? _react2.default.createElement(_Tooltip.Tooltip, _extends({
        content: tooltip
      }, tooltipProps), childNode) : childNode;

      return _react2.default.createElement(_dropdownConstants.DropdownContext.Consumer, null, ({
        onSelect,
        itemClass,
        disabledClass,
        hoverClass
      }) => {
        if (this.props.role === 'separator') {
          classes = className;
        } else {
          classes = (0, _reactStyles.css)(isDisabled && disabledClass, isHovered && hoverClass, className);
        }

        return _react2.default.createElement("li", {
          role: "none"
        }, _react2.default.isValidElement(children) ? _react2.default.Children.map(children, child => {
          const clonedElement = _react2.default.cloneElement(child, {
            className: (0, _reactStyles.css)(isDisabled && disabledClass, isHovered && hoverClass, className, itemClass, child.props.className),
            ref: this.ref,
            onKeyDown: this.onKeyDown,
            onClick: event => {
              if (!isDisabled) {
                onClick && onClick(event);
                onSelect && onSelect(event);
              }
            }
          });

          return renderWithTooltip(clonedElement);
        }) : renderWithTooltip(_react2.default.createElement(Component, _extends({}, additionalProps, {
          href: href || null,
          className: (0, _reactStyles.css)(classes, this.props.role !== 'separator' && itemClass),
          ref: this.ref,
          onKeyDown: this.onKeyDown,
          onClick: event => {
            if (!isDisabled) {
              onClick && onClick(event);
              onSelect && onSelect(event);
            }
          }
        }), children)));
      });
    }

  }

  DropdownItem.propTypes = propTypes;
  DropdownItem.defaultProps = defaultProps;
  exports.default = DropdownItem;
});
//# sourceMappingURL=InternalDropdownItem.js.map