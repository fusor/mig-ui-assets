(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "prop-types", "@patternfly/react-styles/css/components/Dropdown/dropdown", "@patternfly/react-styles", "./DropdownMenu", "./dropdownConstants"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("prop-types"), require("@patternfly/react-styles/css/components/Dropdown/dropdown"), require("@patternfly/react-styles"), require("./DropdownMenu"), require("./dropdownConstants"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.dropdown, global.reactStyles, global.DropdownMenu, global.dropdownConstants);
    global.undefined = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _dropdown, _reactStyles, _DropdownMenu, _dropdownConstants) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DropdownWithContext = undefined;

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _dropdown2 = _interopRequireDefault(_dropdown);

  var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  // seed for the aria-labelledby ID
  let currentId = 0;
  const propTypes = {
    /** Anything which can be rendered in a dropdown */
    children: props => {
      if (props.dropdownItems && props.dropdownItems.length > 0 && props.children) {
        return new Error(`Children and dropdownItems props have been provided. Only the dropdownItems prop items will be rendered `);
      }

      return null;
    },

    /** Classes applied to root element of dropdown */
    className: _propTypes2.default.string,

    /** Array of DropdownItem nodes that will be rendered in the dropdown Menu list */
    dropdownItems: _propTypes2.default.array,

    /** Flag to indicate if menu is opened */
    isOpen: _propTypes2.default.bool,

    /** Display the toggle with no border or background */
    isPlain: _propTypes2.default.bool,

    /** Indicates where menu will be aligned horizontally */
    position: _propTypes2.default.oneOf(Object.values(_dropdownConstants.DropdownPosition)),

    /** Display menu above or below dropdown toggle */
    direction: _propTypes2.default.oneOf(Object.values(_dropdownConstants.DropdownDirection)),

    /** Flag to indicate if dropdown has groups */
    isGrouped: _propTypes2.default.bool,

    /** Placeholder to use custom toggle elements */
    toggle: _propTypes2.default.node.isRequired,

    /** Function callback called when user selects item */
    onSelect: _propTypes2.default.func,

    /** Additional props are spread to the container <div> */
    '': _propTypes2.default.any // eslint-disable-line react/require-default-props

  };
  const defaultProps = {
    children: null,
    className: '',
    dropdownItems: [],
    isOpen: false,
    isPlain: false,
    isGrouped: false,
    position: _dropdownConstants.DropdownPosition.left,
    direction: _dropdownConstants.DropdownDirection.down,
    onSelect: Function.prototype
  };

  class DropdownWithContext extends _react2.default.Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "onEnter", () => {
        this.openedOnEnter = true;
      });
    }

    componentDidUpdate() {
      if (!this.props.isOpen) this.openedOnEnter = false;
    }

    render() {
      const _this$props = this.props,
            {
        children,
        className,
        direction,
        dropdownItems,
        isOpen,
        isPlain,
        isGrouped,
        onSelect,
        position,
        toggle
      } = _this$props,
            props = _objectWithoutProperties(_this$props, ["children", "className", "direction", "dropdownItems", "isOpen", "isPlain", "isGrouped", "onSelect", "position", "toggle"]);

      const id = toggle.props.id || `pf-toggle-id-${currentId++}`;
      let component;
      let renderedContent;
      let ariaHasPopup = null;

      if (dropdownItems && dropdownItems.length > 0) {
        component = 'ul';
        renderedContent = dropdownItems;
        ariaHasPopup = true;
      } else {
        component = 'div';
        renderedContent = children;
      }

      return _react2.default.createElement(_dropdownConstants.DropdownContext.Consumer, null, ({
        baseClass,
        baseComponent: BaseComponent
      }) => _react2.default.createElement(BaseComponent, _extends({}, props, {
        className: (0, _reactStyles.css)(baseClass, direction === _dropdownConstants.DropdownDirection.up && _dropdown2.default.modifiers.top, isOpen && _dropdown2.default.modifiers.expanded, className),
        ref: ref => {
          this.parentRef = ref;
        }
      }), _react.Children.map(toggle, oneToggle => (0, _react.cloneElement)(oneToggle, {
        parentRef: this.parentRef,
        isOpen,
        id,
        isPlain,
        ariaHasPopup,
        onEnter: this.onEnter
      })), isOpen && _react2.default.createElement(_DropdownMenu2.default, {
        component: component,
        isOpen: isOpen,
        position: position,
        "aria-labelledby": id,
        openedOnEnter: this.openedOnEnter,
        isGrouped: isGrouped
      }, renderedContent)));
    }

  }

  exports.DropdownWithContext = DropdownWithContext;

  const Dropdown = _ref => {
    let {
      onSelect
    } = _ref,
        props = _objectWithoutProperties(_ref, ["onSelect"]);

    return _react2.default.createElement(_dropdownConstants.DropdownContext.Provider, {
      value: {
        onSelect: event => onSelect && onSelect(event),
        menuClass: _dropdown2.default.dropdownMenu,
        itemClass: _dropdown2.default.dropdownMenuItem,
        toggleClass: _dropdown2.default.dropdownToggle,
        baseClass: _dropdown2.default.dropdown,
        baseComponent: 'div',
        sectionClass: _dropdown2.default.dropdownGroup,
        sectionTitleClass: _dropdown2.default.dropdownGroupTitle,
        sectionComponent: 'section',
        disabledClass: _dropdown2.default.modifiers.disabled,
        hoverClass: _dropdown2.default.modifiers.hover,
        separatorClass: _dropdown2.default.dropdownSeparator
      }
    }, _react2.default.createElement(DropdownWithContext, props));
  };

  Dropdown.propTypes = propTypes;
  Dropdown.defaultProps = defaultProps;
  DropdownWithContext.propTypes = propTypes;
  DropdownWithContext.defaultProps = defaultProps;
  exports.default = Dropdown;
});
//# sourceMappingURL=Dropdown.js.map