(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "prop-types", "@patternfly/react-styles/css/components/OptionsMenu/options-menu", "@patternfly/react-styles", "../../helpers", "../Dropdown"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("prop-types"), require("@patternfly/react-styles/css/components/OptionsMenu/options-menu"), require("@patternfly/react-styles"), require("../../helpers"), require("../Dropdown"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.optionsMenu, global.reactStyles, global.helpers, global.Dropdown);
    global.undefined = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _optionsMenu, _reactStyles, _helpers, _Dropdown) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _optionsMenu2 = _interopRequireDefault(_optionsMenu);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function OptionsToggle(props) {
    const {
      itemsTitle,
      optionsToggle,
      firstIndex,
      lastIndex,
      itemCount,
      widgetId,
      onToggle,
      isOpen,
      showToggle,
      parentRef,
      toggleTemplate: ToggleTemplate
    } = props;
    return _react2.default.createElement("div", {
      className: (0, _reactStyles.css)(_optionsMenu2.default.optionsMenuToggle, (0, _reactStyles.getModifier)(_optionsMenu2.default, 'plain'), (0, _reactStyles.getModifier)(_optionsMenu2.default, 'text'))
    }, _react2.default.createElement("span", {
      className: (0, _reactStyles.css)(_optionsMenu2.default.optionsMenuToggleText)
    }, typeof ToggleTemplate === 'string' ? (0, _helpers.fillTemplate)(ToggleTemplate, {
      firstIndex,
      lastIndex,
      itemCount,
      itemsTitle
    }) : _react2.default.createElement(ToggleTemplate, {
      firstIndex: firstIndex,
      lastIndex: lastIndex,
      itemCount: itemCount,
      itemsTitle: itemsTitle
    })), showToggle && _react2.default.createElement(_Dropdown.DropdownToggle, {
      "aria-label": optionsToggle,
      onToggle: onToggle,
      isOpen: isOpen,
      id: `${widgetId}-toggle`,
      isSplitButton: true,
      className: _optionsMenu2.default.optionsMenuToggleButton,
      parentRef: parentRef
    }));
  }

  OptionsToggle.propTypes = {
    itemsTitle: _propTypes2.default.string,
    optionsToggle: _propTypes2.default.string,
    firstIndex: _propTypes2.default.number,
    lastIndex: _propTypes2.default.number,
    itemCount: _propTypes2.default.number,
    widgetId: _propTypes2.default.string,
    onToggle: _propTypes2.default.func,
    isOpen: _propTypes2.default.bool,
    parentRef: _propTypes2.default.any,
    showToggle: _propTypes2.default.bool,
    toggleTemplate: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
  };
  OptionsToggle.defaultProps = {
    itemsTitle: 'items',
    optionsToggle: 'Select',
    firstIndex: 0,
    lastIndex: 0,
    itemCount: 0,
    widgetId: '',
    onToggle: () => undefined,
    isOpen: false,
    parentRef: null,
    showToggle: true,
    toggleTemplate: ''
  };
  exports.default = OptionsToggle;
});
//# sourceMappingURL=OptionsToggle.js.map